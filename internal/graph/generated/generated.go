// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/upbound/xgql/internal/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CompositeResource() CompositeResourceResolver
	CompositeResourceClaim() CompositeResourceClaimResolver
	CompositeResourceClaimSpec() CompositeResourceClaimSpecResolver
	CompositeResourceDefinition() CompositeResourceDefinitionResolver
	CompositeResourceDefinitionSpec() CompositeResourceDefinitionSpecResolver
	CompositeResourceSpec() CompositeResourceSpecResolver
	Composition() CompositionResolver
	Configuration() ConfigurationResolver
	ConfigurationRevision() ConfigurationRevisionResolver
	ConfigurationRevisionStatus() ConfigurationRevisionStatusResolver
	CustomResourceDefinition() CustomResourceDefinitionResolver
	Event() EventResolver
	GenericResource() GenericResourceResolver
	ManagedResource() ManagedResourceResolver
	ManagedResourceSpec() ManagedResourceSpecResolver
	ObjectMeta() ObjectMetaResolver
	Provider() ProviderResolver
	ProviderConfig() ProviderConfigResolver
	ProviderRevision() ProviderRevisionResolver
	ProviderRevisionStatus() ProviderRevisionStatusResolver
	Query() QueryResolver
	Secret() SecretResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ComposedResourceConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CompositeResource struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	CompositeResourceClaim struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	CompositeResourceClaimConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CompositeResourceClaimConnectionDetails struct {
		LastPublishedTime func(childComplexity int) int
	}

	CompositeResourceClaimSpec struct {
		Composition              func(childComplexity int) int
		CompositionSelector      func(childComplexity int) int
		Resource                 func(childComplexity int) int
		WritesConnectionSecretTo func(childComplexity int) int
	}

	CompositeResourceClaimStatus struct {
		Conditions        func(childComplexity int) int
		ConnectionDetails func(childComplexity int) int
	}

	CompositeResourceConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CompositeResourceConnectionDetails struct {
		LastPublishedTime func(childComplexity int) int
	}

	CompositeResourceDefinition struct {
		APIVersion                     func(childComplexity int) int
		DefinedCompositeResourceClaims func(childComplexity int, limit *int, version *string, namespace *string) int
		DefinedCompositeResources      func(childComplexity int, limit *int, version *string) int
		Events                         func(childComplexity int, limit *int) int
		Kind                           func(childComplexity int) int
		Metadata                       func(childComplexity int) int
		Raw                            func(childComplexity int) int
		Spec                           func(childComplexity int) int
		Status                         func(childComplexity int) int
	}

	CompositeResourceDefinitionControllerStatus struct {
		CompositeResourceClaimType func(childComplexity int) int
		CompositeResourceType      func(childComplexity int) int
	}

	CompositeResourceDefinitionList struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CompositeResourceDefinitionNames struct {
		Categories func(childComplexity int) int
		Kind       func(childComplexity int) int
		ListKind   func(childComplexity int) int
		Plural     func(childComplexity int) int
		ShortNames func(childComplexity int) int
		Singular   func(childComplexity int) int
	}

	CompositeResourceDefinitionSpec struct {
		ClaimNames           func(childComplexity int) int
		ConnectionSecretKeys func(childComplexity int) int
		DefaultComposition   func(childComplexity int) int
		EnforcedComposition  func(childComplexity int) int
		Group                func(childComplexity int) int
		Names                func(childComplexity int) int
		Versions             func(childComplexity int) int
	}

	CompositeResourceDefinitionStatus struct {
		Conditions  func(childComplexity int) int
		Controllers func(childComplexity int) int
	}

	CompositeResourceDefinitionVersion struct {
		Name          func(childComplexity int) int
		Referenceable func(childComplexity int) int
		Schema        func(childComplexity int) int
		Served        func(childComplexity int) int
	}

	CompositeResourceSpec struct {
		Claim                    func(childComplexity int) int
		Composition              func(childComplexity int) int
		CompositionSelector      func(childComplexity int) int
		Resources                func(childComplexity int, limit *int) int
		WritesConnectionSecretTo func(childComplexity int) int
	}

	CompositeResourceStatus struct {
		Conditions        func(childComplexity int) int
		ConnectionDetails func(childComplexity int) int
	}

	CompositeResourceValidation struct {
		OpenAPIV3Schema func(childComplexity int) int
	}

	Composition struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	CompositionList struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CompositionSpec struct {
		CompositeTypeRef                  func(childComplexity int) int
		WriteConnectionSecretsToNamespace func(childComplexity int) int
	}

	CompositionStatus struct {
		Conditions func(childComplexity int) int
	}

	Condition struct {
		LastTransitionTime func(childComplexity int) int
		Message            func(childComplexity int) int
		Reason             func(childComplexity int) int
		Status             func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	Configuration struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Revisions  func(childComplexity int, limit *int, active *bool) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ConfigurationList struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	ConfigurationRevision struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ConfigurationRevisionConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	ConfigurationRevisionSpec struct {
		DesiredState                func(childComplexity int) int
		IgnoreCrossplaneConstraints func(childComplexity int) int
		Package                     func(childComplexity int) int
		PackagePullPolicy           func(childComplexity int) int
		Revision                    func(childComplexity int) int
		SkipDependencyResolution    func(childComplexity int) int
	}

	ConfigurationRevisionStatus struct {
		Conditions            func(childComplexity int) int
		FoundDependencies     func(childComplexity int) int
		InstalledDependencies func(childComplexity int) int
		InvalidDependencies   func(childComplexity int) int
		Objects               func(childComplexity int, limit *int) int
		PermissionRequests    func(childComplexity int) int
	}

	ConfigurationSpec struct {
		IgnoreCrossplaneConstraints func(childComplexity int) int
		Package                     func(childComplexity int) int
		PackagePullPolicy           func(childComplexity int) int
		RevisionActivationPolicy    func(childComplexity int) int
		RevisionHistoryLimit        func(childComplexity int) int
		SkipDependencyResolution    func(childComplexity int) int
	}

	ConfigurationStatus struct {
		Conditions        func(childComplexity int) int
		CurrentIdentifier func(childComplexity int) int
		CurrentRevision   func(childComplexity int) int
	}

	CustomResourceDefinition struct {
		APIVersion       func(childComplexity int) int
		DefinedResources func(childComplexity int, limit *int, version *string) int
		Events           func(childComplexity int, limit *int) int
		Kind             func(childComplexity int) int
		Metadata         func(childComplexity int) int
		Raw              func(childComplexity int) int
		Spec             func(childComplexity int) int
		Status           func(childComplexity int) int
	}

	CustomResourceDefinitionNames struct {
		Categories func(childComplexity int) int
		Kind       func(childComplexity int) int
		ListKind   func(childComplexity int) int
		Plural     func(childComplexity int) int
		ShortNames func(childComplexity int) int
		Singular   func(childComplexity int) int
	}

	CustomResourceDefinitionSpec struct {
		Group    func(childComplexity int) int
		Names    func(childComplexity int) int
		Versions func(childComplexity int) int
	}

	CustomResourceDefinitionStatus struct {
		Conditions func(childComplexity int) int
	}

	CustomResourceDefinitionVersion struct {
		Name   func(childComplexity int) int
		Schema func(childComplexity int) int
		Served func(childComplexity int) int
	}

	CustomResourceValidation struct {
		OpenAPIV3Schema func(childComplexity int) int
	}

	Event struct {
		APIVersion     func(childComplexity int) int
		Count          func(childComplexity int) int
		FirstTime      func(childComplexity int) int
		InvolvedObject func(childComplexity int) int
		Kind           func(childComplexity int) int
		LastTime       func(childComplexity int) int
		Message        func(childComplexity int) int
		Metadata       func(childComplexity int) int
		Raw            func(childComplexity int) int
		Reason         func(childComplexity int) int
		Source         func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	EventConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	EventSource struct {
		Component func(childComplexity int) int
	}

	GenericResource struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
	}

	KubernetesResourceConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	LabelSelector struct {
		MatchLabels func(childComplexity int) int
	}

	ManagedResource struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ManagedResourceSpec struct {
		ConnectionSecret func(childComplexity int) int
		DeletionPolicy   func(childComplexity int) int
		ProviderConfig   func(childComplexity int) int
	}

	ManagedResourceStatus struct {
		Conditions func(childComplexity int) int
	}

	ObjectMeta struct {
		Annotations     func(childComplexity int) int
		CreationTime    func(childComplexity int) int
		DeletionTime    func(childComplexity int) int
		GenerateName    func(childComplexity int) int
		Generation      func(childComplexity int) int
		Labels          func(childComplexity int) int
		Name            func(childComplexity int) int
		Namespace       func(childComplexity int) int
		Owners          func(childComplexity int, limit *int, controller *bool) int
		ResourceVersion func(childComplexity int) int
		UID             func(childComplexity int) int
	}

	Owner struct {
		Controller func(childComplexity int) int
		Resource   func(childComplexity int) int
	}

	OwnerConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	PolicyRule struct {
		APIGroups       func(childComplexity int) int
		NonResourceURLs func(childComplexity int) int
		ResourceNames   func(childComplexity int) int
		Resources       func(childComplexity int) int
		Verbs           func(childComplexity int) int
	}

	Provider struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Revisions  func(childComplexity int, limit *int, active *bool) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ProviderConfig struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ProviderConfigStatus struct {
		Conditions func(childComplexity int) int
		Users      func(childComplexity int) int
	}

	ProviderList struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	ProviderRevision struct {
		APIVersion func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
		Spec       func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ProviderRevisionConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	ProviderRevisionSpec struct {
		DesiredState                func(childComplexity int) int
		IgnoreCrossplaneConstraints func(childComplexity int) int
		Package                     func(childComplexity int) int
		PackagePullPolicy           func(childComplexity int) int
		Revision                    func(childComplexity int) int
		SkipDependencyResolution    func(childComplexity int) int
	}

	ProviderRevisionStatus struct {
		Conditions            func(childComplexity int) int
		FoundDependencies     func(childComplexity int) int
		InstalledDependencies func(childComplexity int) int
		InvalidDependencies   func(childComplexity int) int
		Objects               func(childComplexity int, limit *int) int
		PermissionRequests    func(childComplexity int) int
	}

	ProviderSpec struct {
		IgnoreCrossplaneConstraints func(childComplexity int) int
		Package                     func(childComplexity int) int
		PackagePullPolicy           func(childComplexity int) int
		RevisionActivationPolicy    func(childComplexity int) int
		RevisionHistoryLimit        func(childComplexity int) int
		SkipDependencyResolution    func(childComplexity int) int
	}

	ProviderStatus struct {
		Conditions        func(childComplexity int) int
		CurrentIdentifier func(childComplexity int) int
		CurrentRevision   func(childComplexity int) int
	}

	Query struct {
		CompositeResourceDefinitions func(childComplexity int, limit *int, dangling *bool) int
		Compositions                 func(childComplexity int, limit *int, dangling *bool) int
		Configurations               func(childComplexity int, limit *int) int
		Providers                    func(childComplexity int, limit *int) int
	}

	Secret struct {
		APIVersion func(childComplexity int) int
		Data       func(childComplexity int) int
		Events     func(childComplexity int, limit *int) int
		Kind       func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Raw        func(childComplexity int) int
	}

	SecretConnection struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	TypeReference struct {
		APIVersion func(childComplexity int) int
		Kind       func(childComplexity int) int
	}
}

type CompositeResourceResolver interface {
	Events(ctx context.Context, obj *model.CompositeResource, limit *int) (*model.EventConnection, error)
}
type CompositeResourceClaimResolver interface {
	Events(ctx context.Context, obj *model.CompositeResourceClaim, limit *int) (*model.EventConnection, error)
}
type CompositeResourceClaimSpecResolver interface {
	Composition(ctx context.Context, obj *model.CompositeResourceClaimSpec) (*model.Composition, error)

	Resource(ctx context.Context, obj *model.CompositeResourceClaimSpec) (*model.CompositeResource, error)
	WritesConnectionSecretTo(ctx context.Context, obj *model.CompositeResourceClaimSpec) (*model.Secret, error)
}
type CompositeResourceDefinitionResolver interface {
	Events(ctx context.Context, obj *model.CompositeResourceDefinition, limit *int) (*model.EventConnection, error)
	DefinedCompositeResources(ctx context.Context, obj *model.CompositeResourceDefinition, limit *int, version *string) (*model.CompositeResourceConnection, error)
	DefinedCompositeResourceClaims(ctx context.Context, obj *model.CompositeResourceDefinition, limit *int, version *string, namespace *string) (*model.CompositeResourceClaimConnection, error)
}
type CompositeResourceDefinitionSpecResolver interface {
	DefaultComposition(ctx context.Context, obj *model.CompositeResourceDefinitionSpec) (*model.Composition, error)
	EnforcedComposition(ctx context.Context, obj *model.CompositeResourceDefinitionSpec) (*model.Composition, error)
}
type CompositeResourceSpecResolver interface {
	Composition(ctx context.Context, obj *model.CompositeResourceSpec) (*model.Composition, error)

	Claim(ctx context.Context, obj *model.CompositeResourceSpec) (*model.CompositeResourceClaim, error)
	WritesConnectionSecretTo(ctx context.Context, obj *model.CompositeResourceSpec) (*model.Secret, error)
	Resources(ctx context.Context, obj *model.CompositeResourceSpec, limit *int) (*model.ComposedResourceConnection, error)
}
type CompositionResolver interface {
	Events(ctx context.Context, obj *model.Composition, limit *int) (*model.EventConnection, error)
}
type ConfigurationResolver interface {
	Events(ctx context.Context, obj *model.Configuration, limit *int) (*model.EventConnection, error)
	Revisions(ctx context.Context, obj *model.Configuration, limit *int, active *bool) (*model.ConfigurationRevisionConnection, error)
}
type ConfigurationRevisionResolver interface {
	Events(ctx context.Context, obj *model.ConfigurationRevision, limit *int) (*model.EventConnection, error)
}
type ConfigurationRevisionStatusResolver interface {
	Objects(ctx context.Context, obj *model.ConfigurationRevisionStatus, limit *int) (*model.KubernetesResourceConnection, error)
}
type CustomResourceDefinitionResolver interface {
	DefinedResources(ctx context.Context, obj *model.CustomResourceDefinition, limit *int, version *string) (*model.KubernetesResourceConnection, error)
}
type EventResolver interface {
	InvolvedObject(ctx context.Context, obj *model.Event) (model.KubernetesResource, error)
}
type GenericResourceResolver interface {
	Events(ctx context.Context, obj *model.GenericResource, limit *int) (*model.EventConnection, error)
}
type ManagedResourceResolver interface {
	Events(ctx context.Context, obj *model.ManagedResource, limit *int) (*model.EventConnection, error)
}
type ManagedResourceSpecResolver interface {
	ConnectionSecret(ctx context.Context, obj *model.ManagedResourceSpec) (*model.Secret, error)
	ProviderConfig(ctx context.Context, obj *model.ManagedResourceSpec) (*model.ProviderConfig, error)
}
type ObjectMetaResolver interface {
	Owners(ctx context.Context, obj *model.ObjectMeta, limit *int, controller *bool) (*model.OwnerConnection, error)
}
type ProviderResolver interface {
	Events(ctx context.Context, obj *model.Provider, limit *int) (*model.EventConnection, error)
	Revisions(ctx context.Context, obj *model.Provider, limit *int, active *bool) (*model.ProviderRevisionConnection, error)
}
type ProviderConfigResolver interface {
	Events(ctx context.Context, obj *model.ProviderConfig, limit *int) (*model.EventConnection, error)
}
type ProviderRevisionResolver interface {
	Events(ctx context.Context, obj *model.ProviderRevision, limit *int) (*model.EventConnection, error)
}
type ProviderRevisionStatusResolver interface {
	Objects(ctx context.Context, obj *model.ProviderRevisionStatus, limit *int) (*model.KubernetesResourceConnection, error)
}
type QueryResolver interface {
	Providers(ctx context.Context, limit *int) (*model.ProviderList, error)
	Configurations(ctx context.Context, limit *int) (*model.ConfigurationList, error)
	CompositeResourceDefinitions(ctx context.Context, limit *int, dangling *bool) (*model.CompositeResourceDefinitionList, error)
	Compositions(ctx context.Context, limit *int, dangling *bool) (*model.CompositionList, error)
}
type SecretResolver interface {
	Events(ctx context.Context, obj *model.Secret, limit *int) (*model.EventConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ComposedResourceConnection.count":
		if e.complexity.ComposedResourceConnection.Count == nil {
			break
		}

		return e.complexity.ComposedResourceConnection.Count(childComplexity), true

	case "ComposedResourceConnection.items":
		if e.complexity.ComposedResourceConnection.Items == nil {
			break
		}

		return e.complexity.ComposedResourceConnection.Items(childComplexity), true

	case "CompositeResource.apiVersion":
		if e.complexity.CompositeResource.APIVersion == nil {
			break
		}

		return e.complexity.CompositeResource.APIVersion(childComplexity), true

	case "CompositeResource.events":
		if e.complexity.CompositeResource.Events == nil {
			break
		}

		args, err := ec.field_CompositeResource_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResource.Events(childComplexity, args["limit"].(*int)), true

	case "CompositeResource.kind":
		if e.complexity.CompositeResource.Kind == nil {
			break
		}

		return e.complexity.CompositeResource.Kind(childComplexity), true

	case "CompositeResource.metadata":
		if e.complexity.CompositeResource.Metadata == nil {
			break
		}

		return e.complexity.CompositeResource.Metadata(childComplexity), true

	case "CompositeResource.raw":
		if e.complexity.CompositeResource.Raw == nil {
			break
		}

		return e.complexity.CompositeResource.Raw(childComplexity), true

	case "CompositeResource.spec":
		if e.complexity.CompositeResource.Spec == nil {
			break
		}

		return e.complexity.CompositeResource.Spec(childComplexity), true

	case "CompositeResource.status":
		if e.complexity.CompositeResource.Status == nil {
			break
		}

		return e.complexity.CompositeResource.Status(childComplexity), true

	case "CompositeResourceClaim.apiVersion":
		if e.complexity.CompositeResourceClaim.APIVersion == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.APIVersion(childComplexity), true

	case "CompositeResourceClaim.events":
		if e.complexity.CompositeResourceClaim.Events == nil {
			break
		}

		args, err := ec.field_CompositeResourceClaim_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResourceClaim.Events(childComplexity, args["limit"].(*int)), true

	case "CompositeResourceClaim.kind":
		if e.complexity.CompositeResourceClaim.Kind == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.Kind(childComplexity), true

	case "CompositeResourceClaim.metadata":
		if e.complexity.CompositeResourceClaim.Metadata == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.Metadata(childComplexity), true

	case "CompositeResourceClaim.raw":
		if e.complexity.CompositeResourceClaim.Raw == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.Raw(childComplexity), true

	case "CompositeResourceClaim.spec":
		if e.complexity.CompositeResourceClaim.Spec == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.Spec(childComplexity), true

	case "CompositeResourceClaim.status":
		if e.complexity.CompositeResourceClaim.Status == nil {
			break
		}

		return e.complexity.CompositeResourceClaim.Status(childComplexity), true

	case "CompositeResourceClaimConnection.count":
		if e.complexity.CompositeResourceClaimConnection.Count == nil {
			break
		}

		return e.complexity.CompositeResourceClaimConnection.Count(childComplexity), true

	case "CompositeResourceClaimConnection.items":
		if e.complexity.CompositeResourceClaimConnection.Items == nil {
			break
		}

		return e.complexity.CompositeResourceClaimConnection.Items(childComplexity), true

	case "CompositeResourceClaimConnectionDetails.lastPublishedTime":
		if e.complexity.CompositeResourceClaimConnectionDetails.LastPublishedTime == nil {
			break
		}

		return e.complexity.CompositeResourceClaimConnectionDetails.LastPublishedTime(childComplexity), true

	case "CompositeResourceClaimSpec.composition":
		if e.complexity.CompositeResourceClaimSpec.Composition == nil {
			break
		}

		return e.complexity.CompositeResourceClaimSpec.Composition(childComplexity), true

	case "CompositeResourceClaimSpec.compositionSelector":
		if e.complexity.CompositeResourceClaimSpec.CompositionSelector == nil {
			break
		}

		return e.complexity.CompositeResourceClaimSpec.CompositionSelector(childComplexity), true

	case "CompositeResourceClaimSpec.resource":
		if e.complexity.CompositeResourceClaimSpec.Resource == nil {
			break
		}

		return e.complexity.CompositeResourceClaimSpec.Resource(childComplexity), true

	case "CompositeResourceClaimSpec.writesConnectionSecretTo":
		if e.complexity.CompositeResourceClaimSpec.WritesConnectionSecretTo == nil {
			break
		}

		return e.complexity.CompositeResourceClaimSpec.WritesConnectionSecretTo(childComplexity), true

	case "CompositeResourceClaimStatus.conditions":
		if e.complexity.CompositeResourceClaimStatus.Conditions == nil {
			break
		}

		return e.complexity.CompositeResourceClaimStatus.Conditions(childComplexity), true

	case "CompositeResourceClaimStatus.connectionDetails":
		if e.complexity.CompositeResourceClaimStatus.ConnectionDetails == nil {
			break
		}

		return e.complexity.CompositeResourceClaimStatus.ConnectionDetails(childComplexity), true

	case "CompositeResourceConnection.count":
		if e.complexity.CompositeResourceConnection.Count == nil {
			break
		}

		return e.complexity.CompositeResourceConnection.Count(childComplexity), true

	case "CompositeResourceConnection.items":
		if e.complexity.CompositeResourceConnection.Items == nil {
			break
		}

		return e.complexity.CompositeResourceConnection.Items(childComplexity), true

	case "CompositeResourceConnectionDetails.lastPublishedTime":
		if e.complexity.CompositeResourceConnectionDetails.LastPublishedTime == nil {
			break
		}

		return e.complexity.CompositeResourceConnectionDetails.LastPublishedTime(childComplexity), true

	case "CompositeResourceDefinition.apiVersion":
		if e.complexity.CompositeResourceDefinition.APIVersion == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.APIVersion(childComplexity), true

	case "CompositeResourceDefinition.definedCompositeResourceClaims":
		if e.complexity.CompositeResourceDefinition.DefinedCompositeResourceClaims == nil {
			break
		}

		args, err := ec.field_CompositeResourceDefinition_definedCompositeResourceClaims_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResourceDefinition.DefinedCompositeResourceClaims(childComplexity, args["limit"].(*int), args["version"].(*string), args["namespace"].(*string)), true

	case "CompositeResourceDefinition.definedCompositeResources":
		if e.complexity.CompositeResourceDefinition.DefinedCompositeResources == nil {
			break
		}

		args, err := ec.field_CompositeResourceDefinition_definedCompositeResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResourceDefinition.DefinedCompositeResources(childComplexity, args["limit"].(*int), args["version"].(*string)), true

	case "CompositeResourceDefinition.events":
		if e.complexity.CompositeResourceDefinition.Events == nil {
			break
		}

		args, err := ec.field_CompositeResourceDefinition_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResourceDefinition.Events(childComplexity, args["limit"].(*int)), true

	case "CompositeResourceDefinition.kind":
		if e.complexity.CompositeResourceDefinition.Kind == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.Kind(childComplexity), true

	case "CompositeResourceDefinition.metadata":
		if e.complexity.CompositeResourceDefinition.Metadata == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.Metadata(childComplexity), true

	case "CompositeResourceDefinition.raw":
		if e.complexity.CompositeResourceDefinition.Raw == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.Raw(childComplexity), true

	case "CompositeResourceDefinition.spec":
		if e.complexity.CompositeResourceDefinition.Spec == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.Spec(childComplexity), true

	case "CompositeResourceDefinition.status":
		if e.complexity.CompositeResourceDefinition.Status == nil {
			break
		}

		return e.complexity.CompositeResourceDefinition.Status(childComplexity), true

	case "CompositeResourceDefinitionControllerStatus.compositeResourceClaimType":
		if e.complexity.CompositeResourceDefinitionControllerStatus.CompositeResourceClaimType == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionControllerStatus.CompositeResourceClaimType(childComplexity), true

	case "CompositeResourceDefinitionControllerStatus.compositeResourceType":
		if e.complexity.CompositeResourceDefinitionControllerStatus.CompositeResourceType == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionControllerStatus.CompositeResourceType(childComplexity), true

	case "CompositeResourceDefinitionList.count":
		if e.complexity.CompositeResourceDefinitionList.Count == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionList.Count(childComplexity), true

	case "CompositeResourceDefinitionList.items":
		if e.complexity.CompositeResourceDefinitionList.Items == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionList.Items(childComplexity), true

	case "CompositeResourceDefinitionNames.categories":
		if e.complexity.CompositeResourceDefinitionNames.Categories == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.Categories(childComplexity), true

	case "CompositeResourceDefinitionNames.kind":
		if e.complexity.CompositeResourceDefinitionNames.Kind == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.Kind(childComplexity), true

	case "CompositeResourceDefinitionNames.listKind":
		if e.complexity.CompositeResourceDefinitionNames.ListKind == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.ListKind(childComplexity), true

	case "CompositeResourceDefinitionNames.plural":
		if e.complexity.CompositeResourceDefinitionNames.Plural == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.Plural(childComplexity), true

	case "CompositeResourceDefinitionNames.shortNames":
		if e.complexity.CompositeResourceDefinitionNames.ShortNames == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.ShortNames(childComplexity), true

	case "CompositeResourceDefinitionNames.singular":
		if e.complexity.CompositeResourceDefinitionNames.Singular == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionNames.Singular(childComplexity), true

	case "CompositeResourceDefinitionSpec.claimNames":
		if e.complexity.CompositeResourceDefinitionSpec.ClaimNames == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.ClaimNames(childComplexity), true

	case "CompositeResourceDefinitionSpec.connectionSecretKeys":
		if e.complexity.CompositeResourceDefinitionSpec.ConnectionSecretKeys == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.ConnectionSecretKeys(childComplexity), true

	case "CompositeResourceDefinitionSpec.defaultComposition":
		if e.complexity.CompositeResourceDefinitionSpec.DefaultComposition == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.DefaultComposition(childComplexity), true

	case "CompositeResourceDefinitionSpec.enforcedComposition":
		if e.complexity.CompositeResourceDefinitionSpec.EnforcedComposition == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.EnforcedComposition(childComplexity), true

	case "CompositeResourceDefinitionSpec.group":
		if e.complexity.CompositeResourceDefinitionSpec.Group == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.Group(childComplexity), true

	case "CompositeResourceDefinitionSpec.names":
		if e.complexity.CompositeResourceDefinitionSpec.Names == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.Names(childComplexity), true

	case "CompositeResourceDefinitionSpec.versions":
		if e.complexity.CompositeResourceDefinitionSpec.Versions == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionSpec.Versions(childComplexity), true

	case "CompositeResourceDefinitionStatus.conditions":
		if e.complexity.CompositeResourceDefinitionStatus.Conditions == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionStatus.Conditions(childComplexity), true

	case "CompositeResourceDefinitionStatus.controllers":
		if e.complexity.CompositeResourceDefinitionStatus.Controllers == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionStatus.Controllers(childComplexity), true

	case "CompositeResourceDefinitionVersion.name":
		if e.complexity.CompositeResourceDefinitionVersion.Name == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionVersion.Name(childComplexity), true

	case "CompositeResourceDefinitionVersion.referenceable":
		if e.complexity.CompositeResourceDefinitionVersion.Referenceable == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionVersion.Referenceable(childComplexity), true

	case "CompositeResourceDefinitionVersion.schema":
		if e.complexity.CompositeResourceDefinitionVersion.Schema == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionVersion.Schema(childComplexity), true

	case "CompositeResourceDefinitionVersion.served":
		if e.complexity.CompositeResourceDefinitionVersion.Served == nil {
			break
		}

		return e.complexity.CompositeResourceDefinitionVersion.Served(childComplexity), true

	case "CompositeResourceSpec.claim":
		if e.complexity.CompositeResourceSpec.Claim == nil {
			break
		}

		return e.complexity.CompositeResourceSpec.Claim(childComplexity), true

	case "CompositeResourceSpec.composition":
		if e.complexity.CompositeResourceSpec.Composition == nil {
			break
		}

		return e.complexity.CompositeResourceSpec.Composition(childComplexity), true

	case "CompositeResourceSpec.compositionSelector":
		if e.complexity.CompositeResourceSpec.CompositionSelector == nil {
			break
		}

		return e.complexity.CompositeResourceSpec.CompositionSelector(childComplexity), true

	case "CompositeResourceSpec.resources":
		if e.complexity.CompositeResourceSpec.Resources == nil {
			break
		}

		args, err := ec.field_CompositeResourceSpec_resources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompositeResourceSpec.Resources(childComplexity, args["limit"].(*int)), true

	case "CompositeResourceSpec.writesConnectionSecretTo":
		if e.complexity.CompositeResourceSpec.WritesConnectionSecretTo == nil {
			break
		}

		return e.complexity.CompositeResourceSpec.WritesConnectionSecretTo(childComplexity), true

	case "CompositeResourceStatus.conditions":
		if e.complexity.CompositeResourceStatus.Conditions == nil {
			break
		}

		return e.complexity.CompositeResourceStatus.Conditions(childComplexity), true

	case "CompositeResourceStatus.connectionDetails":
		if e.complexity.CompositeResourceStatus.ConnectionDetails == nil {
			break
		}

		return e.complexity.CompositeResourceStatus.ConnectionDetails(childComplexity), true

	case "CompositeResourceValidation.openAPIV3Schema":
		if e.complexity.CompositeResourceValidation.OpenAPIV3Schema == nil {
			break
		}

		return e.complexity.CompositeResourceValidation.OpenAPIV3Schema(childComplexity), true

	case "Composition.apiVersion":
		if e.complexity.Composition.APIVersion == nil {
			break
		}

		return e.complexity.Composition.APIVersion(childComplexity), true

	case "Composition.events":
		if e.complexity.Composition.Events == nil {
			break
		}

		args, err := ec.field_Composition_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Composition.Events(childComplexity, args["limit"].(*int)), true

	case "Composition.kind":
		if e.complexity.Composition.Kind == nil {
			break
		}

		return e.complexity.Composition.Kind(childComplexity), true

	case "Composition.metadata":
		if e.complexity.Composition.Metadata == nil {
			break
		}

		return e.complexity.Composition.Metadata(childComplexity), true

	case "Composition.raw":
		if e.complexity.Composition.Raw == nil {
			break
		}

		return e.complexity.Composition.Raw(childComplexity), true

	case "Composition.spec":
		if e.complexity.Composition.Spec == nil {
			break
		}

		return e.complexity.Composition.Spec(childComplexity), true

	case "Composition.status":
		if e.complexity.Composition.Status == nil {
			break
		}

		return e.complexity.Composition.Status(childComplexity), true

	case "CompositionList.count":
		if e.complexity.CompositionList.Count == nil {
			break
		}

		return e.complexity.CompositionList.Count(childComplexity), true

	case "CompositionList.items":
		if e.complexity.CompositionList.Items == nil {
			break
		}

		return e.complexity.CompositionList.Items(childComplexity), true

	case "CompositionSpec.compositeTypeRef":
		if e.complexity.CompositionSpec.CompositeTypeRef == nil {
			break
		}

		return e.complexity.CompositionSpec.CompositeTypeRef(childComplexity), true

	case "CompositionSpec.writeConnectionSecretsToNamespace":
		if e.complexity.CompositionSpec.WriteConnectionSecretsToNamespace == nil {
			break
		}

		return e.complexity.CompositionSpec.WriteConnectionSecretsToNamespace(childComplexity), true

	case "CompositionStatus.conditions":
		if e.complexity.CompositionStatus.Conditions == nil {
			break
		}

		return e.complexity.CompositionStatus.Conditions(childComplexity), true

	case "Condition.lastTransitionTime":
		if e.complexity.Condition.LastTransitionTime == nil {
			break
		}

		return e.complexity.Condition.LastTransitionTime(childComplexity), true

	case "Condition.message":
		if e.complexity.Condition.Message == nil {
			break
		}

		return e.complexity.Condition.Message(childComplexity), true

	case "Condition.reason":
		if e.complexity.Condition.Reason == nil {
			break
		}

		return e.complexity.Condition.Reason(childComplexity), true

	case "Condition.status":
		if e.complexity.Condition.Status == nil {
			break
		}

		return e.complexity.Condition.Status(childComplexity), true

	case "Condition.type":
		if e.complexity.Condition.Type == nil {
			break
		}

		return e.complexity.Condition.Type(childComplexity), true

	case "Configuration.apiVersion":
		if e.complexity.Configuration.APIVersion == nil {
			break
		}

		return e.complexity.Configuration.APIVersion(childComplexity), true

	case "Configuration.events":
		if e.complexity.Configuration.Events == nil {
			break
		}

		args, err := ec.field_Configuration_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Configuration.Events(childComplexity, args["limit"].(*int)), true

	case "Configuration.kind":
		if e.complexity.Configuration.Kind == nil {
			break
		}

		return e.complexity.Configuration.Kind(childComplexity), true

	case "Configuration.metadata":
		if e.complexity.Configuration.Metadata == nil {
			break
		}

		return e.complexity.Configuration.Metadata(childComplexity), true

	case "Configuration.raw":
		if e.complexity.Configuration.Raw == nil {
			break
		}

		return e.complexity.Configuration.Raw(childComplexity), true

	case "Configuration.revisions":
		if e.complexity.Configuration.Revisions == nil {
			break
		}

		args, err := ec.field_Configuration_revisions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Configuration.Revisions(childComplexity, args["limit"].(*int), args["active"].(*bool)), true

	case "Configuration.spec":
		if e.complexity.Configuration.Spec == nil {
			break
		}

		return e.complexity.Configuration.Spec(childComplexity), true

	case "Configuration.status":
		if e.complexity.Configuration.Status == nil {
			break
		}

		return e.complexity.Configuration.Status(childComplexity), true

	case "ConfigurationList.count":
		if e.complexity.ConfigurationList.Count == nil {
			break
		}

		return e.complexity.ConfigurationList.Count(childComplexity), true

	case "ConfigurationList.items":
		if e.complexity.ConfigurationList.Items == nil {
			break
		}

		return e.complexity.ConfigurationList.Items(childComplexity), true

	case "ConfigurationRevision.apiVersion":
		if e.complexity.ConfigurationRevision.APIVersion == nil {
			break
		}

		return e.complexity.ConfigurationRevision.APIVersion(childComplexity), true

	case "ConfigurationRevision.events":
		if e.complexity.ConfigurationRevision.Events == nil {
			break
		}

		args, err := ec.field_ConfigurationRevision_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ConfigurationRevision.Events(childComplexity, args["limit"].(*int)), true

	case "ConfigurationRevision.kind":
		if e.complexity.ConfigurationRevision.Kind == nil {
			break
		}

		return e.complexity.ConfigurationRevision.Kind(childComplexity), true

	case "ConfigurationRevision.metadata":
		if e.complexity.ConfigurationRevision.Metadata == nil {
			break
		}

		return e.complexity.ConfigurationRevision.Metadata(childComplexity), true

	case "ConfigurationRevision.raw":
		if e.complexity.ConfigurationRevision.Raw == nil {
			break
		}

		return e.complexity.ConfigurationRevision.Raw(childComplexity), true

	case "ConfigurationRevision.spec":
		if e.complexity.ConfigurationRevision.Spec == nil {
			break
		}

		return e.complexity.ConfigurationRevision.Spec(childComplexity), true

	case "ConfigurationRevision.status":
		if e.complexity.ConfigurationRevision.Status == nil {
			break
		}

		return e.complexity.ConfigurationRevision.Status(childComplexity), true

	case "ConfigurationRevisionConnection.count":
		if e.complexity.ConfigurationRevisionConnection.Count == nil {
			break
		}

		return e.complexity.ConfigurationRevisionConnection.Count(childComplexity), true

	case "ConfigurationRevisionConnection.items":
		if e.complexity.ConfigurationRevisionConnection.Items == nil {
			break
		}

		return e.complexity.ConfigurationRevisionConnection.Items(childComplexity), true

	case "ConfigurationRevisionSpec.desiredState":
		if e.complexity.ConfigurationRevisionSpec.DesiredState == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.DesiredState(childComplexity), true

	case "ConfigurationRevisionSpec.ignoreCrossplaneConstraints":
		if e.complexity.ConfigurationRevisionSpec.IgnoreCrossplaneConstraints == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.IgnoreCrossplaneConstraints(childComplexity), true

	case "ConfigurationRevisionSpec.package":
		if e.complexity.ConfigurationRevisionSpec.Package == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.Package(childComplexity), true

	case "ConfigurationRevisionSpec.packagePullPolicy":
		if e.complexity.ConfigurationRevisionSpec.PackagePullPolicy == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.PackagePullPolicy(childComplexity), true

	case "ConfigurationRevisionSpec.revision":
		if e.complexity.ConfigurationRevisionSpec.Revision == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.Revision(childComplexity), true

	case "ConfigurationRevisionSpec.skipDependencyResolution":
		if e.complexity.ConfigurationRevisionSpec.SkipDependencyResolution == nil {
			break
		}

		return e.complexity.ConfigurationRevisionSpec.SkipDependencyResolution(childComplexity), true

	case "ConfigurationRevisionStatus.conditions":
		if e.complexity.ConfigurationRevisionStatus.Conditions == nil {
			break
		}

		return e.complexity.ConfigurationRevisionStatus.Conditions(childComplexity), true

	case "ConfigurationRevisionStatus.foundDependencies":
		if e.complexity.ConfigurationRevisionStatus.FoundDependencies == nil {
			break
		}

		return e.complexity.ConfigurationRevisionStatus.FoundDependencies(childComplexity), true

	case "ConfigurationRevisionStatus.installedDependencies":
		if e.complexity.ConfigurationRevisionStatus.InstalledDependencies == nil {
			break
		}

		return e.complexity.ConfigurationRevisionStatus.InstalledDependencies(childComplexity), true

	case "ConfigurationRevisionStatus.invalidDependencies":
		if e.complexity.ConfigurationRevisionStatus.InvalidDependencies == nil {
			break
		}

		return e.complexity.ConfigurationRevisionStatus.InvalidDependencies(childComplexity), true

	case "ConfigurationRevisionStatus.objects":
		if e.complexity.ConfigurationRevisionStatus.Objects == nil {
			break
		}

		args, err := ec.field_ConfigurationRevisionStatus_objects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ConfigurationRevisionStatus.Objects(childComplexity, args["limit"].(*int)), true

	case "ConfigurationRevisionStatus.permissionRequests":
		if e.complexity.ConfigurationRevisionStatus.PermissionRequests == nil {
			break
		}

		return e.complexity.ConfigurationRevisionStatus.PermissionRequests(childComplexity), true

	case "ConfigurationSpec.ignoreCrossplaneConstraints":
		if e.complexity.ConfigurationSpec.IgnoreCrossplaneConstraints == nil {
			break
		}

		return e.complexity.ConfigurationSpec.IgnoreCrossplaneConstraints(childComplexity), true

	case "ConfigurationSpec.package":
		if e.complexity.ConfigurationSpec.Package == nil {
			break
		}

		return e.complexity.ConfigurationSpec.Package(childComplexity), true

	case "ConfigurationSpec.packagePullPolicy":
		if e.complexity.ConfigurationSpec.PackagePullPolicy == nil {
			break
		}

		return e.complexity.ConfigurationSpec.PackagePullPolicy(childComplexity), true

	case "ConfigurationSpec.revisionActivationPolicy":
		if e.complexity.ConfigurationSpec.RevisionActivationPolicy == nil {
			break
		}

		return e.complexity.ConfigurationSpec.RevisionActivationPolicy(childComplexity), true

	case "ConfigurationSpec.revisionHistoryLimit":
		if e.complexity.ConfigurationSpec.RevisionHistoryLimit == nil {
			break
		}

		return e.complexity.ConfigurationSpec.RevisionHistoryLimit(childComplexity), true

	case "ConfigurationSpec.skipDependencyResolution":
		if e.complexity.ConfigurationSpec.SkipDependencyResolution == nil {
			break
		}

		return e.complexity.ConfigurationSpec.SkipDependencyResolution(childComplexity), true

	case "ConfigurationStatus.conditions":
		if e.complexity.ConfigurationStatus.Conditions == nil {
			break
		}

		return e.complexity.ConfigurationStatus.Conditions(childComplexity), true

	case "ConfigurationStatus.currentIdentifier":
		if e.complexity.ConfigurationStatus.CurrentIdentifier == nil {
			break
		}

		return e.complexity.ConfigurationStatus.CurrentIdentifier(childComplexity), true

	case "ConfigurationStatus.currentRevision":
		if e.complexity.ConfigurationStatus.CurrentRevision == nil {
			break
		}

		return e.complexity.ConfigurationStatus.CurrentRevision(childComplexity), true

	case "CustomResourceDefinition.apiVersion":
		if e.complexity.CustomResourceDefinition.APIVersion == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.APIVersion(childComplexity), true

	case "CustomResourceDefinition.definedResources":
		if e.complexity.CustomResourceDefinition.DefinedResources == nil {
			break
		}

		args, err := ec.field_CustomResourceDefinition_definedResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CustomResourceDefinition.DefinedResources(childComplexity, args["limit"].(*int), args["version"].(*string)), true

	case "CustomResourceDefinition.events":
		if e.complexity.CustomResourceDefinition.Events == nil {
			break
		}

		args, err := ec.field_CustomResourceDefinition_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CustomResourceDefinition.Events(childComplexity, args["limit"].(*int)), true

	case "CustomResourceDefinition.kind":
		if e.complexity.CustomResourceDefinition.Kind == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.Kind(childComplexity), true

	case "CustomResourceDefinition.metadata":
		if e.complexity.CustomResourceDefinition.Metadata == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.Metadata(childComplexity), true

	case "CustomResourceDefinition.raw":
		if e.complexity.CustomResourceDefinition.Raw == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.Raw(childComplexity), true

	case "CustomResourceDefinition.spec":
		if e.complexity.CustomResourceDefinition.Spec == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.Spec(childComplexity), true

	case "CustomResourceDefinition.status":
		if e.complexity.CustomResourceDefinition.Status == nil {
			break
		}

		return e.complexity.CustomResourceDefinition.Status(childComplexity), true

	case "CustomResourceDefinitionNames.categories":
		if e.complexity.CustomResourceDefinitionNames.Categories == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.Categories(childComplexity), true

	case "CustomResourceDefinitionNames.kind":
		if e.complexity.CustomResourceDefinitionNames.Kind == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.Kind(childComplexity), true

	case "CustomResourceDefinitionNames.listKind":
		if e.complexity.CustomResourceDefinitionNames.ListKind == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.ListKind(childComplexity), true

	case "CustomResourceDefinitionNames.plural":
		if e.complexity.CustomResourceDefinitionNames.Plural == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.Plural(childComplexity), true

	case "CustomResourceDefinitionNames.shortNames":
		if e.complexity.CustomResourceDefinitionNames.ShortNames == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.ShortNames(childComplexity), true

	case "CustomResourceDefinitionNames.singular":
		if e.complexity.CustomResourceDefinitionNames.Singular == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionNames.Singular(childComplexity), true

	case "CustomResourceDefinitionSpec.group":
		if e.complexity.CustomResourceDefinitionSpec.Group == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionSpec.Group(childComplexity), true

	case "CustomResourceDefinitionSpec.names":
		if e.complexity.CustomResourceDefinitionSpec.Names == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionSpec.Names(childComplexity), true

	case "CustomResourceDefinitionSpec.versions":
		if e.complexity.CustomResourceDefinitionSpec.Versions == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionSpec.Versions(childComplexity), true

	case "CustomResourceDefinitionStatus.conditions":
		if e.complexity.CustomResourceDefinitionStatus.Conditions == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionStatus.Conditions(childComplexity), true

	case "CustomResourceDefinitionVersion.name":
		if e.complexity.CustomResourceDefinitionVersion.Name == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionVersion.Name(childComplexity), true

	case "CustomResourceDefinitionVersion.schema":
		if e.complexity.CustomResourceDefinitionVersion.Schema == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionVersion.Schema(childComplexity), true

	case "CustomResourceDefinitionVersion.served":
		if e.complexity.CustomResourceDefinitionVersion.Served == nil {
			break
		}

		return e.complexity.CustomResourceDefinitionVersion.Served(childComplexity), true

	case "CustomResourceValidation.openAPIV3Schema":
		if e.complexity.CustomResourceValidation.OpenAPIV3Schema == nil {
			break
		}

		return e.complexity.CustomResourceValidation.OpenAPIV3Schema(childComplexity), true

	case "Event.apiVersion":
		if e.complexity.Event.APIVersion == nil {
			break
		}

		return e.complexity.Event.APIVersion(childComplexity), true

	case "Event.count":
		if e.complexity.Event.Count == nil {
			break
		}

		return e.complexity.Event.Count(childComplexity), true

	case "Event.firstTime":
		if e.complexity.Event.FirstTime == nil {
			break
		}

		return e.complexity.Event.FirstTime(childComplexity), true

	case "Event.involvedObject":
		if e.complexity.Event.InvolvedObject == nil {
			break
		}

		return e.complexity.Event.InvolvedObject(childComplexity), true

	case "Event.kind":
		if e.complexity.Event.Kind == nil {
			break
		}

		return e.complexity.Event.Kind(childComplexity), true

	case "Event.lastTime":
		if e.complexity.Event.LastTime == nil {
			break
		}

		return e.complexity.Event.LastTime(childComplexity), true

	case "Event.message":
		if e.complexity.Event.Message == nil {
			break
		}

		return e.complexity.Event.Message(childComplexity), true

	case "Event.metadata":
		if e.complexity.Event.Metadata == nil {
			break
		}

		return e.complexity.Event.Metadata(childComplexity), true

	case "Event.raw":
		if e.complexity.Event.Raw == nil {
			break
		}

		return e.complexity.Event.Raw(childComplexity), true

	case "Event.reason":
		if e.complexity.Event.Reason == nil {
			break
		}

		return e.complexity.Event.Reason(childComplexity), true

	case "Event.source":
		if e.complexity.Event.Source == nil {
			break
		}

		return e.complexity.Event.Source(childComplexity), true

	case "Event.type":
		if e.complexity.Event.Type == nil {
			break
		}

		return e.complexity.Event.Type(childComplexity), true

	case "EventConnection.count":
		if e.complexity.EventConnection.Count == nil {
			break
		}

		return e.complexity.EventConnection.Count(childComplexity), true

	case "EventConnection.items":
		if e.complexity.EventConnection.Items == nil {
			break
		}

		return e.complexity.EventConnection.Items(childComplexity), true

	case "EventSource.component":
		if e.complexity.EventSource.Component == nil {
			break
		}

		return e.complexity.EventSource.Component(childComplexity), true

	case "GenericResource.apiVersion":
		if e.complexity.GenericResource.APIVersion == nil {
			break
		}

		return e.complexity.GenericResource.APIVersion(childComplexity), true

	case "GenericResource.events":
		if e.complexity.GenericResource.Events == nil {
			break
		}

		args, err := ec.field_GenericResource_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GenericResource.Events(childComplexity, args["limit"].(*int)), true

	case "GenericResource.kind":
		if e.complexity.GenericResource.Kind == nil {
			break
		}

		return e.complexity.GenericResource.Kind(childComplexity), true

	case "GenericResource.metadata":
		if e.complexity.GenericResource.Metadata == nil {
			break
		}

		return e.complexity.GenericResource.Metadata(childComplexity), true

	case "GenericResource.raw":
		if e.complexity.GenericResource.Raw == nil {
			break
		}

		return e.complexity.GenericResource.Raw(childComplexity), true

	case "KubernetesResourceConnection.count":
		if e.complexity.KubernetesResourceConnection.Count == nil {
			break
		}

		return e.complexity.KubernetesResourceConnection.Count(childComplexity), true

	case "KubernetesResourceConnection.items":
		if e.complexity.KubernetesResourceConnection.Items == nil {
			break
		}

		return e.complexity.KubernetesResourceConnection.Items(childComplexity), true

	case "LabelSelector.matchLabels":
		if e.complexity.LabelSelector.MatchLabels == nil {
			break
		}

		return e.complexity.LabelSelector.MatchLabels(childComplexity), true

	case "ManagedResource.apiVersion":
		if e.complexity.ManagedResource.APIVersion == nil {
			break
		}

		return e.complexity.ManagedResource.APIVersion(childComplexity), true

	case "ManagedResource.events":
		if e.complexity.ManagedResource.Events == nil {
			break
		}

		args, err := ec.field_ManagedResource_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ManagedResource.Events(childComplexity, args["limit"].(*int)), true

	case "ManagedResource.kind":
		if e.complexity.ManagedResource.Kind == nil {
			break
		}

		return e.complexity.ManagedResource.Kind(childComplexity), true

	case "ManagedResource.metadata":
		if e.complexity.ManagedResource.Metadata == nil {
			break
		}

		return e.complexity.ManagedResource.Metadata(childComplexity), true

	case "ManagedResource.raw":
		if e.complexity.ManagedResource.Raw == nil {
			break
		}

		return e.complexity.ManagedResource.Raw(childComplexity), true

	case "ManagedResource.spec":
		if e.complexity.ManagedResource.Spec == nil {
			break
		}

		return e.complexity.ManagedResource.Spec(childComplexity), true

	case "ManagedResource.status":
		if e.complexity.ManagedResource.Status == nil {
			break
		}

		return e.complexity.ManagedResource.Status(childComplexity), true

	case "ManagedResourceSpec.connectionSecret":
		if e.complexity.ManagedResourceSpec.ConnectionSecret == nil {
			break
		}

		return e.complexity.ManagedResourceSpec.ConnectionSecret(childComplexity), true

	case "ManagedResourceSpec.deletionPolicy":
		if e.complexity.ManagedResourceSpec.DeletionPolicy == nil {
			break
		}

		return e.complexity.ManagedResourceSpec.DeletionPolicy(childComplexity), true

	case "ManagedResourceSpec.providerConfig":
		if e.complexity.ManagedResourceSpec.ProviderConfig == nil {
			break
		}

		return e.complexity.ManagedResourceSpec.ProviderConfig(childComplexity), true

	case "ManagedResourceStatus.conditions":
		if e.complexity.ManagedResourceStatus.Conditions == nil {
			break
		}

		return e.complexity.ManagedResourceStatus.Conditions(childComplexity), true

	case "ObjectMeta.annotations":
		if e.complexity.ObjectMeta.Annotations == nil {
			break
		}

		return e.complexity.ObjectMeta.Annotations(childComplexity), true

	case "ObjectMeta.creationTime":
		if e.complexity.ObjectMeta.CreationTime == nil {
			break
		}

		return e.complexity.ObjectMeta.CreationTime(childComplexity), true

	case "ObjectMeta.deletionTime":
		if e.complexity.ObjectMeta.DeletionTime == nil {
			break
		}

		return e.complexity.ObjectMeta.DeletionTime(childComplexity), true

	case "ObjectMeta.generateName":
		if e.complexity.ObjectMeta.GenerateName == nil {
			break
		}

		return e.complexity.ObjectMeta.GenerateName(childComplexity), true

	case "ObjectMeta.generation":
		if e.complexity.ObjectMeta.Generation == nil {
			break
		}

		return e.complexity.ObjectMeta.Generation(childComplexity), true

	case "ObjectMeta.labels":
		if e.complexity.ObjectMeta.Labels == nil {
			break
		}

		return e.complexity.ObjectMeta.Labels(childComplexity), true

	case "ObjectMeta.name":
		if e.complexity.ObjectMeta.Name == nil {
			break
		}

		return e.complexity.ObjectMeta.Name(childComplexity), true

	case "ObjectMeta.namespace":
		if e.complexity.ObjectMeta.Namespace == nil {
			break
		}

		return e.complexity.ObjectMeta.Namespace(childComplexity), true

	case "ObjectMeta.owners":
		if e.complexity.ObjectMeta.Owners == nil {
			break
		}

		args, err := ec.field_ObjectMeta_owners_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ObjectMeta.Owners(childComplexity, args["limit"].(*int), args["controller"].(*bool)), true

	case "ObjectMeta.resourceVersion":
		if e.complexity.ObjectMeta.ResourceVersion == nil {
			break
		}

		return e.complexity.ObjectMeta.ResourceVersion(childComplexity), true

	case "ObjectMeta.uid":
		if e.complexity.ObjectMeta.UID == nil {
			break
		}

		return e.complexity.ObjectMeta.UID(childComplexity), true

	case "Owner.controller":
		if e.complexity.Owner.Controller == nil {
			break
		}

		return e.complexity.Owner.Controller(childComplexity), true

	case "Owner.resource":
		if e.complexity.Owner.Resource == nil {
			break
		}

		return e.complexity.Owner.Resource(childComplexity), true

	case "OwnerConnection.count":
		if e.complexity.OwnerConnection.Count == nil {
			break
		}

		return e.complexity.OwnerConnection.Count(childComplexity), true

	case "OwnerConnection.items":
		if e.complexity.OwnerConnection.Items == nil {
			break
		}

		return e.complexity.OwnerConnection.Items(childComplexity), true

	case "PolicyRule.apiGroups":
		if e.complexity.PolicyRule.APIGroups == nil {
			break
		}

		return e.complexity.PolicyRule.APIGroups(childComplexity), true

	case "PolicyRule.nonResourceURLs":
		if e.complexity.PolicyRule.NonResourceURLs == nil {
			break
		}

		return e.complexity.PolicyRule.NonResourceURLs(childComplexity), true

	case "PolicyRule.resourceNames":
		if e.complexity.PolicyRule.ResourceNames == nil {
			break
		}

		return e.complexity.PolicyRule.ResourceNames(childComplexity), true

	case "PolicyRule.resources":
		if e.complexity.PolicyRule.Resources == nil {
			break
		}

		return e.complexity.PolicyRule.Resources(childComplexity), true

	case "PolicyRule.verbs":
		if e.complexity.PolicyRule.Verbs == nil {
			break
		}

		return e.complexity.PolicyRule.Verbs(childComplexity), true

	case "Provider.apiVersion":
		if e.complexity.Provider.APIVersion == nil {
			break
		}

		return e.complexity.Provider.APIVersion(childComplexity), true

	case "Provider.events":
		if e.complexity.Provider.Events == nil {
			break
		}

		args, err := ec.field_Provider_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Provider.Events(childComplexity, args["limit"].(*int)), true

	case "Provider.kind":
		if e.complexity.Provider.Kind == nil {
			break
		}

		return e.complexity.Provider.Kind(childComplexity), true

	case "Provider.metadata":
		if e.complexity.Provider.Metadata == nil {
			break
		}

		return e.complexity.Provider.Metadata(childComplexity), true

	case "Provider.raw":
		if e.complexity.Provider.Raw == nil {
			break
		}

		return e.complexity.Provider.Raw(childComplexity), true

	case "Provider.revisions":
		if e.complexity.Provider.Revisions == nil {
			break
		}

		args, err := ec.field_Provider_revisions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Provider.Revisions(childComplexity, args["limit"].(*int), args["active"].(*bool)), true

	case "Provider.spec":
		if e.complexity.Provider.Spec == nil {
			break
		}

		return e.complexity.Provider.Spec(childComplexity), true

	case "Provider.status":
		if e.complexity.Provider.Status == nil {
			break
		}

		return e.complexity.Provider.Status(childComplexity), true

	case "ProviderConfig.apiVersion":
		if e.complexity.ProviderConfig.APIVersion == nil {
			break
		}

		return e.complexity.ProviderConfig.APIVersion(childComplexity), true

	case "ProviderConfig.events":
		if e.complexity.ProviderConfig.Events == nil {
			break
		}

		args, err := ec.field_ProviderConfig_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProviderConfig.Events(childComplexity, args["limit"].(*int)), true

	case "ProviderConfig.kind":
		if e.complexity.ProviderConfig.Kind == nil {
			break
		}

		return e.complexity.ProviderConfig.Kind(childComplexity), true

	case "ProviderConfig.metadata":
		if e.complexity.ProviderConfig.Metadata == nil {
			break
		}

		return e.complexity.ProviderConfig.Metadata(childComplexity), true

	case "ProviderConfig.raw":
		if e.complexity.ProviderConfig.Raw == nil {
			break
		}

		return e.complexity.ProviderConfig.Raw(childComplexity), true

	case "ProviderConfig.status":
		if e.complexity.ProviderConfig.Status == nil {
			break
		}

		return e.complexity.ProviderConfig.Status(childComplexity), true

	case "ProviderConfigStatus.conditions":
		if e.complexity.ProviderConfigStatus.Conditions == nil {
			break
		}

		return e.complexity.ProviderConfigStatus.Conditions(childComplexity), true

	case "ProviderConfigStatus.users":
		if e.complexity.ProviderConfigStatus.Users == nil {
			break
		}

		return e.complexity.ProviderConfigStatus.Users(childComplexity), true

	case "ProviderList.count":
		if e.complexity.ProviderList.Count == nil {
			break
		}

		return e.complexity.ProviderList.Count(childComplexity), true

	case "ProviderList.items":
		if e.complexity.ProviderList.Items == nil {
			break
		}

		return e.complexity.ProviderList.Items(childComplexity), true

	case "ProviderRevision.apiVersion":
		if e.complexity.ProviderRevision.APIVersion == nil {
			break
		}

		return e.complexity.ProviderRevision.APIVersion(childComplexity), true

	case "ProviderRevision.events":
		if e.complexity.ProviderRevision.Events == nil {
			break
		}

		args, err := ec.field_ProviderRevision_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProviderRevision.Events(childComplexity, args["limit"].(*int)), true

	case "ProviderRevision.kind":
		if e.complexity.ProviderRevision.Kind == nil {
			break
		}

		return e.complexity.ProviderRevision.Kind(childComplexity), true

	case "ProviderRevision.metadata":
		if e.complexity.ProviderRevision.Metadata == nil {
			break
		}

		return e.complexity.ProviderRevision.Metadata(childComplexity), true

	case "ProviderRevision.raw":
		if e.complexity.ProviderRevision.Raw == nil {
			break
		}

		return e.complexity.ProviderRevision.Raw(childComplexity), true

	case "ProviderRevision.spec":
		if e.complexity.ProviderRevision.Spec == nil {
			break
		}

		return e.complexity.ProviderRevision.Spec(childComplexity), true

	case "ProviderRevision.status":
		if e.complexity.ProviderRevision.Status == nil {
			break
		}

		return e.complexity.ProviderRevision.Status(childComplexity), true

	case "ProviderRevisionConnection.count":
		if e.complexity.ProviderRevisionConnection.Count == nil {
			break
		}

		return e.complexity.ProviderRevisionConnection.Count(childComplexity), true

	case "ProviderRevisionConnection.items":
		if e.complexity.ProviderRevisionConnection.Items == nil {
			break
		}

		return e.complexity.ProviderRevisionConnection.Items(childComplexity), true

	case "ProviderRevisionSpec.desiredState":
		if e.complexity.ProviderRevisionSpec.DesiredState == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.DesiredState(childComplexity), true

	case "ProviderRevisionSpec.ignoreCrossplaneConstraints":
		if e.complexity.ProviderRevisionSpec.IgnoreCrossplaneConstraints == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.IgnoreCrossplaneConstraints(childComplexity), true

	case "ProviderRevisionSpec.package":
		if e.complexity.ProviderRevisionSpec.Package == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.Package(childComplexity), true

	case "ProviderRevisionSpec.packagePullPolicy":
		if e.complexity.ProviderRevisionSpec.PackagePullPolicy == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.PackagePullPolicy(childComplexity), true

	case "ProviderRevisionSpec.revision":
		if e.complexity.ProviderRevisionSpec.Revision == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.Revision(childComplexity), true

	case "ProviderRevisionSpec.skipDependencyResolution":
		if e.complexity.ProviderRevisionSpec.SkipDependencyResolution == nil {
			break
		}

		return e.complexity.ProviderRevisionSpec.SkipDependencyResolution(childComplexity), true

	case "ProviderRevisionStatus.conditions":
		if e.complexity.ProviderRevisionStatus.Conditions == nil {
			break
		}

		return e.complexity.ProviderRevisionStatus.Conditions(childComplexity), true

	case "ProviderRevisionStatus.foundDependencies":
		if e.complexity.ProviderRevisionStatus.FoundDependencies == nil {
			break
		}

		return e.complexity.ProviderRevisionStatus.FoundDependencies(childComplexity), true

	case "ProviderRevisionStatus.installedDependencies":
		if e.complexity.ProviderRevisionStatus.InstalledDependencies == nil {
			break
		}

		return e.complexity.ProviderRevisionStatus.InstalledDependencies(childComplexity), true

	case "ProviderRevisionStatus.invalidDependencies":
		if e.complexity.ProviderRevisionStatus.InvalidDependencies == nil {
			break
		}

		return e.complexity.ProviderRevisionStatus.InvalidDependencies(childComplexity), true

	case "ProviderRevisionStatus.objects":
		if e.complexity.ProviderRevisionStatus.Objects == nil {
			break
		}

		args, err := ec.field_ProviderRevisionStatus_objects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProviderRevisionStatus.Objects(childComplexity, args["limit"].(*int)), true

	case "ProviderRevisionStatus.permissionRequests":
		if e.complexity.ProviderRevisionStatus.PermissionRequests == nil {
			break
		}

		return e.complexity.ProviderRevisionStatus.PermissionRequests(childComplexity), true

	case "ProviderSpec.ignoreCrossplaneConstraints":
		if e.complexity.ProviderSpec.IgnoreCrossplaneConstraints == nil {
			break
		}

		return e.complexity.ProviderSpec.IgnoreCrossplaneConstraints(childComplexity), true

	case "ProviderSpec.package":
		if e.complexity.ProviderSpec.Package == nil {
			break
		}

		return e.complexity.ProviderSpec.Package(childComplexity), true

	case "ProviderSpec.packagePullPolicy":
		if e.complexity.ProviderSpec.PackagePullPolicy == nil {
			break
		}

		return e.complexity.ProviderSpec.PackagePullPolicy(childComplexity), true

	case "ProviderSpec.revisionActivationPolicy":
		if e.complexity.ProviderSpec.RevisionActivationPolicy == nil {
			break
		}

		return e.complexity.ProviderSpec.RevisionActivationPolicy(childComplexity), true

	case "ProviderSpec.revisionHistoryLimit":
		if e.complexity.ProviderSpec.RevisionHistoryLimit == nil {
			break
		}

		return e.complexity.ProviderSpec.RevisionHistoryLimit(childComplexity), true

	case "ProviderSpec.skipDependencyResolution":
		if e.complexity.ProviderSpec.SkipDependencyResolution == nil {
			break
		}

		return e.complexity.ProviderSpec.SkipDependencyResolution(childComplexity), true

	case "ProviderStatus.conditions":
		if e.complexity.ProviderStatus.Conditions == nil {
			break
		}

		return e.complexity.ProviderStatus.Conditions(childComplexity), true

	case "ProviderStatus.currentIdentifier":
		if e.complexity.ProviderStatus.CurrentIdentifier == nil {
			break
		}

		return e.complexity.ProviderStatus.CurrentIdentifier(childComplexity), true

	case "ProviderStatus.currentRevision":
		if e.complexity.ProviderStatus.CurrentRevision == nil {
			break
		}

		return e.complexity.ProviderStatus.CurrentRevision(childComplexity), true

	case "Query.compositeResourceDefinitions":
		if e.complexity.Query.CompositeResourceDefinitions == nil {
			break
		}

		args, err := ec.field_Query_compositeResourceDefinitions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompositeResourceDefinitions(childComplexity, args["limit"].(*int), args["dangling"].(*bool)), true

	case "Query.compositions":
		if e.complexity.Query.Compositions == nil {
			break
		}

		args, err := ec.field_Query_compositions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Compositions(childComplexity, args["limit"].(*int), args["dangling"].(*bool)), true

	case "Query.configurations":
		if e.complexity.Query.Configurations == nil {
			break
		}

		args, err := ec.field_Query_configurations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Configurations(childComplexity, args["limit"].(*int)), true

	case "Query.providers":
		if e.complexity.Query.Providers == nil {
			break
		}

		args, err := ec.field_Query_providers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Providers(childComplexity, args["limit"].(*int)), true

	case "Secret.apiVersion":
		if e.complexity.Secret.APIVersion == nil {
			break
		}

		return e.complexity.Secret.APIVersion(childComplexity), true

	case "Secret.data":
		if e.complexity.Secret.Data == nil {
			break
		}

		return e.complexity.Secret.Data(childComplexity), true

	case "Secret.events":
		if e.complexity.Secret.Events == nil {
			break
		}

		args, err := ec.field_Secret_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Secret.Events(childComplexity, args["limit"].(*int)), true

	case "Secret.kind":
		if e.complexity.Secret.Kind == nil {
			break
		}

		return e.complexity.Secret.Kind(childComplexity), true

	case "Secret.metadata":
		if e.complexity.Secret.Metadata == nil {
			break
		}

		return e.complexity.Secret.Metadata(childComplexity), true

	case "Secret.raw":
		if e.complexity.Secret.Raw == nil {
			break
		}

		return e.complexity.Secret.Raw(childComplexity), true

	case "SecretConnection.count":
		if e.complexity.SecretConnection.Count == nil {
			break
		}

		return e.complexity.SecretConnection.Count(childComplexity), true

	case "SecretConnection.items":
		if e.complexity.SecretConnection.Items == nil {
			break
		}

		return e.complexity.SecretConnection.Items(childComplexity), true

	case "TypeReference.apiVersion":
		if e.complexity.TypeReference.APIVersion == nil {
			break
		}

		return e.complexity.TypeReference.APIVersion(childComplexity), true

	case "TypeReference.kind":
		if e.complexity.TypeReference.Kind == nil {
			break
		}

		return e.complexity.TypeReference.Kind(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema/apiextensions.gql", Input: `type CompositeResourceDefinition implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: CompositeResourceDefinitionSpec!
  status: CompositeResourceDefinitionStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
  definedCompositeResources(limit: Int, version: String): CompositeResourceConnection! @goField(forceResolver: true)
  definedCompositeResourceClaims(limit: Int, version: String, namespace: String): CompositeResourceClaimConnection! @goField(forceResolver: true)
}

type CompositeResourceConnection {
  items: [CompositeResource!]
  count: Int!
}

type CompositeResourceClaimConnection {
  items: [CompositeResourceClaim!]
  count: Int!
}

type CompositeResourceDefinitionSpec {
  group: String!
  names: CompositeResourceDefinitionNames!
  claimNames: CompositeResourceDefinitionNames
  connectionSecretKeys: [String!]
  defaultComposition: Composition @goField(forceResolver: true)
  enforcedComposition: Composition @goField(forceResolver: true)
  versions: [CompositeResourceDefinitionVersion!]
}

type CompositeResourceDefinitionNames {
  plural: String!
  singular: String
  shortNames: [String!]
  kind: String!
  listKind: String
  categories: [String!]
}

type CompositeResourceDefinitionVersion {
  name: String!
  referenceable: Boolean!
  served: Boolean!
  schema: CompositeResourceValidation
}

type CompositeResourceValidation {
  openAPIV3Schema: JSONObject
}

type CompositeResourceDefinitionStatus implements ConditionedStatus {
  conditions: [Condition!]
  controllers: CompositeResourceDefinitionControllerStatus
}

type CompositeResourceDefinitionControllerStatus {
  compositeResourceType: TypeReference
  compositeResourceClaimType: TypeReference
}

type TypeReference {
  apiVersion: String!
  kind: String!
}

type Composition implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: CompositionSpec!
  status: CompositionStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type CompositionSpec {
  compositeTypeRef: TypeReference!
  writeConnectionSecretsToNamespace: String

  # TODO(negz): Model patch sets and resource templates.
}

type CompositionStatus implements ConditionedStatus {
  conditions: [Condition!]
}

`, BuiltIn: false},
	{Name: "schema/common.gql", Input: `scalar Time
scalar Map
scalar JSONObject

interface KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  raw: JSONObject!

  events(limit: Int): EventConnection! 
}

type EventConnection {
  items: [Event!]
  count: Int!
}

type KubernetesResourceConnection {
  items: [KubernetesResource!]
  count: Int!
}

type GenericResource implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

# Corresponds to v1 object metadata
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#objectmeta-v1-meta
type ObjectMeta {
  name: String!
  generateName: String
  namespace: String
  uid: ID!
  resourceVersion: String!
  generation: Int!
  creationTime: Time!
  deletionTime: Time
  labels: Map
  annotations: Map

  owners(limit: Int, controller: Boolean): OwnerConnection! @goField(forceResolver: true)
}

type OwnerConnection {
  items: [Owner!]
  count: Int!
}

type Owner {
  resource: KubernetesResource!
  controller: Boolean,
}

interface ConditionedStatus {
  conditions: [Condition!]
}

# Note that type and reason are intentionally not enums; Crossplane does not
# limit the allowed values at the API level.
type Condition {
  type: String!
  status: ConditionStatus!
  lastTransitionTime: Time!
  reason: String!
  message: String
}

enum ConditionStatus {
  Unknown
  False
  True
}

type PolicyRule {
  verbs: [String!]!
  apiGroups: [String!]
  resources: [String!]
  resourceNames: [String!]
  nonResourceURLs: [String!]
}

type LabelSelector {
  matchLabels: Map
}

type Event {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  involvedObject: KubernetesResource! @goField(forceResolver: true)
  type: EventType
  reason: String
  message: String
  source: EventSource
  count: Int
  firstTime: Time
  lastTime: Time

  raw: JSONObject!
}

type EventSource {
  component: String
}

enum EventType {
  Normal
  Warning
}

type Secret implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  data: JSONObject

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type SecretConnection {
  items: [Secret!]
  count: Int!
}

type CustomResourceDefinition implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: CustomResourceDefinitionSpec!
  status: CustomResourceDefinitionStatus

  raw: JSONObject!

  events(limit: Int): EventConnection!
  definedResources(limit: Int, version: String): KubernetesResourceConnection! @goField(forceResolver: true)
}

type CustomResourceDefinitionSpec {
  group: String!
  names: CustomResourceDefinitionNames!
  versions: [CustomResourceDefinitionVersion!]
}

type CustomResourceDefinitionNames {
  plural: String!
  singular: String
  shortNames: [String!]
  kind: String!
  listKind: String
  categories: [String!]
}

type CustomResourceDefinitionVersion {
  name: String!
  served: Boolean!
  schema: CustomResourceValidation
}

type CustomResourceValidation {
  openAPIV3Schema: JSONObject
}

type CustomResourceDefinitionStatus implements ConditionedStatus {
  conditions: [Condition!]
}`, BuiltIn: false},
	{Name: "schema/composite.gql", Input: `type CompositeResource implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: CompositeResourceSpec!
  status: CompositeResourceStatus!

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type CompositeResourceSpec {
  composition: Composition @goField(forceResolver: true)
  compositionSelector: LabelSelector
  claim: CompositeResourceClaim @goField(forceResolver: true)
  writesConnectionSecretTo: Secret @goField(forceResolver: true)

  resources(limit: Int): ComposedResourceConnection @goField(forceResolver: true)
}

type ComposedResourceConnection {
  items: [ComposedResource!]
  count: Int!
}

# TODO(negz): Do we need to support GenericResource here, just in case? We only
# support managed an composite resources officially, but in practice some folks
# use arbitrary resources.
union ComposedResource = ManagedResource | CompositeResource

type CompositeResourceStatus implements ConditionedStatus {
  conditions: [Condition!]
  connectionDetails: CompositeResourceConnectionDetails
}

type CompositeResourceConnectionDetails {
  lastPublishedTime: Time
}

type CompositeResourceClaim implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: CompositeResourceClaimSpec!
  status: CompositeResourceClaimStatus!

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type CompositeResourceClaimSpec {
  composition: Composition @goField(forceResolver: true)
  compositionSelector: LabelSelector
  resource: CompositeResource! @goField(forceResolver: true)
  writesConnectionSecretTo: Secret @goField(forceResolver: true)
}

type CompositeResourceClaimStatus implements ConditionedStatus {
  conditions: [Condition!]
  connectionDetails: CompositeResourceClaimConnectionDetails
}

type CompositeResourceClaimConnectionDetails {
  lastPublishedTime: Time
}
`, BuiltIn: false},
	{Name: "schema/configuration.gql", Input: `type Configuration implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: ConfigurationSpec!
  status: ConfigurationStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
  revisions(limit: Int, active: Boolean): ConfigurationRevisionConnection! @goField(forceResolver: true)
}

type ConfigurationRevisionConnection {
  items: [ConfigurationRevision!]
  count: Int!
}

# TODO(negz): Include packagePullSecrets? It seems idiomatic to resolve an array
# of actual secrets, but we're missing the information required to do so and
# it's not obvious whether returning them is useful. At the Kubernetes level we
# have an array of local object references, which do not include a namespace.
# The Secrets are presumed to be read from the namespace in which Crossplane is
# running, which we do not know.

type ConfigurationSpec {
  package: String!
  revisionActivationPolicy: RevisionActivationPolicy
  revisionHistoryLimit: Int
  packagePullPolicy: PackagePullPolicy
  ignoreCrossplaneConstraints: Boolean
  skipDependencyResolution: Boolean
}

type ConfigurationStatus implements ConditionedStatus {
  conditions: [Condition!]
  currentRevision: String
  currentIdentifier: String
}

type ConfigurationRevision implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: ConfigurationRevisionSpec!
  status: ConfigurationRevisionStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type ConfigurationRevisionSpec {
  desiredState: PackageRevisionDesiredState!
  package: String!
  packagePullPolicy: PackagePullPolicy
  revision: Int!
  ignoreCrossplaneConstraints: Boolean
  skipDependencyResolution: Boolean
}

type ConfigurationRevisionStatus implements ConditionedStatus {
  conditions: [Condition!]
  foundDependencies: Int
  installedDependencies: Int
  invalidDependencies: Int
  permissionRequests: [PolicyRule!]

  # In practice these objects are currently always a CompositeResourceDefinition
  # or a Composition. Crossplane lints the content of configuration packages to
  # enforce this, but it's not enforced at the API level. We return an array of
  # KubernetesResource here because doing so allows us to package different
  # types in future without a breaking GraphQL schema change.

  objects(limit: Int): KubernetesResourceConnection! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "schema/directives.gql", Input: `directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION`, BuiltIn: false},
	{Name: "schema/managed.gql", Input: `type ManagedResource implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: ManagedResourceSpec!
  status: ManagedResourceStatus!

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type ManagedResourceSpec {
  connectionSecret: Secret @goField(forceResolver: true)
  providerConfig: ProviderConfig @goField(forceResolver: true)
  deletionPolicy: DeletionPolicy
}

enum DeletionPolicy {
  Delete
  Orphan
}

type ManagedResourceStatus implements ConditionedStatus {
  conditions: [Condition!]
}
`, BuiltIn: false},
	{Name: "schema/package.gql", Input: `enum RevisionActivationPolicy {
  Automatic
  Manual
}

enum PackagePullPolicy {
  Always
  Never
  IfNotPresent
}

enum PackageRevisionDesiredState {
  Inactive
  Active
}

`, BuiltIn: false},
	{Name: "schema/provider.gql", Input: `type Provider implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: ProviderSpec!
  status: ProviderStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
  revisions(limit: Int, active: Boolean): ProviderRevisionConnection! @goField(forceResolver: true)
}

type ProviderRevisionConnection {
  items: [ProviderRevision!]
  count: Int!
}

# TODO(negz): Include packagePullSecrets? It seems idiomatic to resolve an array
# of actual secrets, but we're missing the information required to do so and
# it's not obvious whether returning them is useful. At the Kubernetes level we
# have an array of local object references, which do not include a namespace.
# The Secrets are presumed to be read from the namespace in which Crossplane is
# running, which we do not know.

type ProviderSpec {
  package: String!
  revisionActivationPolicy: RevisionActivationPolicy
  revisionHistoryLimit: Int
  packagePullPolicy: PackagePullPolicy
  ignoreCrossplaneConstraints: Boolean
  skipDependencyResolution: Boolean
}

type ProviderStatus implements ConditionedStatus {
  conditions: [Condition!]
  currentRevision: String
  currentIdentifier: String
}

type ProviderRevision implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  spec: ProviderRevisionSpec!
  status: ProviderRevisionStatus

  raw: JSONObject!

  events(limit: Int): EventConnection! @goField(forceResolver: true)
}

type ProviderRevisionSpec {
  desiredState: PackageRevisionDesiredState!
  package: String!
  packagePullPolicy: PackagePullPolicy
  revision: Int!
  ignoreCrossplaneConstraints: Boolean
  skipDependencyResolution: Boolean

}

type ProviderRevisionStatus implements ConditionedStatus {
  conditions: [Condition!]
  foundDependencies: Int
  installedDependencies: Int
  invalidDependencies: Int
  permissionRequests: [PolicyRule!]

  # In practice these objects are currently always a CustomResourceDefinition.
  # Crossplane lints the content of provider packages to enforce this, but it's
  # not enforced at the API level. We return an array of KubernetesResource here
  # because doing so allows us to package different types in future without a
  # breaking GraphQL schema change.

  objects(limit: Int): KubernetesResourceConnection! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "schema/providerconfig.gql", Input: `type ProviderConfig implements KubernetesResource {
  apiVersion: String!
  kind: String!
  metadata: ObjectMeta!
  status: ProviderConfigStatus

  events(limit: Int): EventConnection! @goField(forceResolver: true)

  raw: JSONObject!
}

type ProviderConfigStatus implements ConditionedStatus {
  conditions: [Condition!]
  users: Int
}`, BuiltIn: false},
	{Name: "schema/queries.gql", Input: `type Query {
    providers(limit: Int): ProviderList!
    configurations(limit: Int): ConfigurationList!
    compositeResourceDefinitions(limit: Int, dangling: Boolean = false): CompositeResourceDefinitionList!
    compositions(limit: Int, dangling: Boolean = false): CompositionList!
}

type ProviderList {
    items: [Provider!]
    count: Int!
}

type ConfigurationList {
    items: [Configuration!]
    count: Int!
}

type CompositeResourceDefinitionList {
    items: [CompositeResourceDefinition!]
    count: Int!
}

type CompositionList {
    items: [Composition!]
    count: Int!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_CompositeResourceClaim_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_CompositeResourceDefinition_definedCompositeResourceClaims_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["namespace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespace"] = arg2
	return args, nil
}

func (ec *executionContext) field_CompositeResourceDefinition_definedCompositeResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_CompositeResourceDefinition_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_CompositeResourceSpec_resources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_CompositeResource_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Composition_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ConfigurationRevisionStatus_objects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ConfigurationRevision_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Configuration_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Configuration_revisions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["active"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["active"] = arg1
	return args, nil
}

func (ec *executionContext) field_CustomResourceDefinition_definedResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_CustomResourceDefinition_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_GenericResource_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ManagedResource_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ObjectMeta_owners_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["controller"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("controller"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["controller"] = arg1
	return args, nil
}

func (ec *executionContext) field_ProviderConfig_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProviderRevisionStatus_objects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProviderRevision_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Provider_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Provider_revisions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["active"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["active"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_compositeResourceDefinitions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["dangling"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dangling"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dangling"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_compositions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["dangling"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dangling"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dangling"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_configurations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_providers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Secret_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ComposedResourceConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.ComposedResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComposedResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ComposedResource)
	fc.Result = res
	return ec.marshalOComposedResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ComposedResourceConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.ComposedResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComposedResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_kind(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_spec(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceSpec)
	fc.Result = res
	return ec.marshalNCompositeResourceSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_status(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceStatus)
	fc.Result = res
	return ec.marshalNCompositeResourceStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_raw(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResource_events(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResource_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResource().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_kind(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_spec(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceClaimSpec)
	fc.Result = res
	return ec.marshalNCompositeResourceClaimSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_status(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceClaimStatus)
	fc.Result = res
	return ec.marshalNCompositeResourceClaimStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_raw(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaim_events(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaim) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaim",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResourceClaim_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceClaim().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.CompositeResourceClaim)
	fc.Result = res
	return ec.marshalOCompositeResourceClaim2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimConnectionDetails_lastPublishedTime(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimConnectionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimConnectionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPublishedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimSpec_composition(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceClaimSpec().Composition(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Composition)
	fc.Result = res
	return ec.marshalOComposition2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimSpec_compositionSelector(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositionSelector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelSelector)
	fc.Result = res
	return ec.marshalOLabelSelector2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐLabelSelector(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimSpec_resource(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceClaimSpec().Resource(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResource)
	fc.Result = res
	return ec.marshalNCompositeResource2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResource(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimSpec_writesConnectionSecretTo(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceClaimSpec().WritesConnectionSecretTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Secret)
	fc.Result = res
	return ec.marshalOSecret2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceClaimStatus_connectionDetails(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceClaimStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceClaimStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceClaimConnectionDetails)
	fc.Result = res
	return ec.marshalOCompositeResourceClaimConnectionDetails2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimConnectionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.CompositeResource)
	fc.Result = res
	return ec.marshalOCompositeResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceConnectionDetails_lastPublishedTime(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceConnectionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceConnectionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPublishedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_kind(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_spec(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionSpec)
	fc.Result = res
	return ec.marshalNCompositeResourceDefinitionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_status(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionStatus)
	fc.Result = res
	return ec.marshalOCompositeResourceDefinitionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_raw(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_events(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResourceDefinition_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceDefinition().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_definedCompositeResources(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResourceDefinition_definedCompositeResources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceDefinition().DefinedCompositeResources(rctx, obj, args["limit"].(*int), args["version"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceConnection)
	fc.Result = res
	return ec.marshalNCompositeResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinition_definedCompositeResourceClaims(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResourceDefinition_definedCompositeResourceClaims_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceDefinition().DefinedCompositeResourceClaims(rctx, obj, args["limit"].(*int), args["version"].(*string), args["namespace"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceClaimConnection)
	fc.Result = res
	return ec.marshalNCompositeResourceClaimConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionControllerStatus_compositeResourceType(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionControllerStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionControllerStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositeResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TypeReference)
	fc.Result = res
	return ec.marshalOTypeReference2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐTypeReference(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionControllerStatus_compositeResourceClaimType(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionControllerStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionControllerStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositeResourceClaimType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TypeReference)
	fc.Result = res
	return ec.marshalOTypeReference2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐTypeReference(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionList_items(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.CompositeResourceDefinition)
	fc.Result = res
	return ec.marshalOCompositeResourceDefinition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionList_count(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_plural(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plural, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_singular(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Singular, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_shortNames(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_kind(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_listKind(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionNames_categories(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_group(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_names(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Names, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionNames)
	fc.Result = res
	return ec.marshalNCompositeResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionNames(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_claimNames(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionNames)
	fc.Result = res
	return ec.marshalOCompositeResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionNames(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_connectionSecretKeys(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionSecretKeys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_defaultComposition(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceDefinitionSpec().DefaultComposition(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Composition)
	fc.Result = res
	return ec.marshalOComposition2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_enforcedComposition(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceDefinitionSpec().EnforcedComposition(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Composition)
	fc.Result = res
	return ec.marshalOComposition2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionSpec_versions(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Versions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.CompositeResourceDefinitionVersion)
	fc.Result = res
	return ec.marshalOCompositeResourceDefinitionVersion2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionStatus_controllers(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controllers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionControllerStatus)
	fc.Result = res
	return ec.marshalOCompositeResourceDefinitionControllerStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionControllerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionVersion_name(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionVersion_referenceable(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Referenceable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionVersion_served(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Served, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceDefinitionVersion_schema(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Schema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceValidation)
	fc.Result = res
	return ec.marshalOCompositeResourceValidation2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceValidation(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceSpec_composition(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceSpec().Composition(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Composition)
	fc.Result = res
	return ec.marshalOComposition2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceSpec_compositionSelector(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositionSelector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelSelector)
	fc.Result = res
	return ec.marshalOLabelSelector2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐLabelSelector(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceSpec_claim(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceSpec().Claim(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceClaim)
	fc.Result = res
	return ec.marshalOCompositeResourceClaim2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaim(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceSpec_writesConnectionSecretTo(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceSpec().WritesConnectionSecretTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Secret)
	fc.Result = res
	return ec.marshalOSecret2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceSpec_resources(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CompositeResourceSpec_resources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompositeResourceSpec().Resources(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComposedResourceConnection)
	fc.Result = res
	return ec.marshalOComposedResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResourceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceStatus_connectionDetails(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceConnectionDetails)
	fc.Result = res
	return ec.marshalOCompositeResourceConnectionDetails2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceConnectionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositeResourceValidation_openAPIV3Schema(ctx context.Context, field graphql.CollectedField, obj *model.CompositeResourceValidation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositeResourceValidation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenAPIV3Schema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSONObject2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_kind(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_spec(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositionSpec)
	fc.Result = res
	return ec.marshalNCompositionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_status(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompositionStatus)
	fc.Result = res
	return ec.marshalOCompositionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_raw(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Composition_events(ctx context.Context, field graphql.CollectedField, obj *model.Composition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Composition_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Composition().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositionList_items(ctx context.Context, field graphql.CollectedField, obj *model.CompositionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositionList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Composition)
	fc.Result = res
	return ec.marshalOComposition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositionList_count(ctx context.Context, field graphql.CollectedField, obj *model.CompositionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositionList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositionSpec_compositeTypeRef(ctx context.Context, field graphql.CollectedField, obj *model.CompositionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositeTypeRef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TypeReference)
	fc.Result = res
	return ec.marshalNTypeReference2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐTypeReference(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositionSpec_writeConnectionSecretsToNamespace(ctx context.Context, field graphql.CollectedField, obj *model.CompositionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WriteConnectionSecretsToNamespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompositionStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.CompositionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompositionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Condition_type(ctx context.Context, field graphql.CollectedField, obj *model.Condition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Condition_status(ctx context.Context, field graphql.CollectedField, obj *model.Condition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ConditionStatus)
	fc.Result = res
	return ec.marshalNConditionStatus2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Condition_lastTransitionTime(ctx context.Context, field graphql.CollectedField, obj *model.Condition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTransitionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Condition_reason(ctx context.Context, field graphql.CollectedField, obj *model.Condition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Condition_message(ctx context.Context, field graphql.CollectedField, obj *model.Condition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_kind(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_spec(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationSpec)
	fc.Result = res
	return ec.marshalNConfigurationSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_status(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationStatus)
	fc.Result = res
	return ec.marshalOConfigurationStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_raw(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_events(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Configuration_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Configuration().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Configuration_revisions(ctx context.Context, field graphql.CollectedField, obj *model.Configuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Configuration",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Configuration_revisions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Configuration().Revisions(rctx, obj, args["limit"].(*int), args["active"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationRevisionConnection)
	fc.Result = res
	return ec.marshalNConfigurationRevisionConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationList_items(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Configuration)
	fc.Result = res
	return ec.marshalOConfiguration2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationList_count(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_kind(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_spec(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationRevisionSpec)
	fc.Result = res
	return ec.marshalNConfigurationRevisionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_status(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationRevisionStatus)
	fc.Result = res
	return ec.marshalOConfigurationRevisionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_raw(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevision_events(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ConfigurationRevision_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ConfigurationRevision().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ConfigurationRevision)
	fc.Result = res
	return ec.marshalOConfigurationRevision2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_desiredState(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PackageRevisionDesiredState)
	fc.Result = res
	return ec.marshalNPackageRevisionDesiredState2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackageRevisionDesiredState(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_package(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_packagePullPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePullPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PackagePullPolicy)
	fc.Result = res
	return ec.marshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_revision(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_ignoreCrossplaneConstraints(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreCrossplaneConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionSpec_skipDependencyResolution(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipDependencyResolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_foundDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoundDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_installedDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstalledDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_invalidDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_permissionRequests(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.PolicyRule)
	fc.Result = res
	return ec.marshalOPolicyRule2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPolicyRuleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationRevisionStatus_objects(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ConfigurationRevisionStatus_objects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ConfigurationRevisionStatus().Objects(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KubernetesResourceConnection)
	fc.Result = res
	return ec.marshalNKubernetesResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_package(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_revisionActivationPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevisionActivationPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RevisionActivationPolicy)
	fc.Result = res
	return ec.marshalORevisionActivationPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐRevisionActivationPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_revisionHistoryLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevisionHistoryLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_packagePullPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePullPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PackagePullPolicy)
	fc.Result = res
	return ec.marshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_ignoreCrossplaneConstraints(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreCrossplaneConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationSpec_skipDependencyResolution(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipDependencyResolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationStatus_currentRevision(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentRevision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigurationStatus_currentIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.ConfigurationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigurationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_kind(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_spec(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomResourceDefinitionSpec)
	fc.Result = res
	return ec.marshalNCustomResourceDefinitionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_status(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomResourceDefinitionStatus)
	fc.Result = res
	return ec.marshalOCustomResourceDefinitionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_raw(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_events(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CustomResourceDefinition_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinition_definedResources(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinition",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CustomResourceDefinition_definedResources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CustomResourceDefinition().DefinedResources(rctx, obj, args["limit"].(*int), args["version"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KubernetesResourceConnection)
	fc.Result = res
	return ec.marshalNKubernetesResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_plural(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plural, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_singular(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Singular, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_shortNames(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_kind(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_listKind(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionNames_categories(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionSpec_group(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionSpec_names(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Names, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomResourceDefinitionNames)
	fc.Result = res
	return ec.marshalNCustomResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionNames(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionSpec_versions(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Versions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.CustomResourceDefinitionVersion)
	fc.Result = res
	return ec.marshalOCustomResourceDefinitionVersion2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionVersion_name(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionVersion_served(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Served, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceDefinitionVersion_schema(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceDefinitionVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceDefinitionVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Schema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomResourceValidation)
	fc.Result = res
	return ec.marshalOCustomResourceValidation2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceValidation(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomResourceValidation_openAPIV3Schema(ctx context.Context, field graphql.CollectedField, obj *model.CustomResourceValidation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustomResourceValidation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenAPIV3Schema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSONObject2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_kind(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_involvedObject(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Event().InvolvedObject(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.KubernetesResource)
	fc.Result = res
	return ec.marshalNKubernetesResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResource(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_type(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventType)
	fc.Result = res
	return ec.marshalOEventType2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventType(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_reason(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_message(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_source(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventSource)
	fc.Result = res
	return ec.marshalOEventSource2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventSource(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_count(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_firstTime(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_lastTime(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_raw(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.EventConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EventConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.EventConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EventSource_component(ctx context.Context, field graphql.CollectedField, obj *model.EventSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GenericResource_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.GenericResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenericResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GenericResource_kind(ctx context.Context, field graphql.CollectedField, obj *model.GenericResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenericResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GenericResource_metadata(ctx context.Context, field graphql.CollectedField, obj *model.GenericResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenericResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _GenericResource_raw(ctx context.Context, field graphql.CollectedField, obj *model.GenericResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenericResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GenericResource_events(ctx context.Context, field graphql.CollectedField, obj *model.GenericResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenericResource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_GenericResource_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GenericResource().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _KubernetesResourceConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.KubernetesResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KubernetesResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.KubernetesResource)
	fc.Result = res
	return ec.marshalOKubernetesResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KubernetesResourceConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.KubernetesResourceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KubernetesResourceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LabelSelector_matchLabels(ctx context.Context, field graphql.CollectedField, obj *model.LabelSelector) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LabelSelector",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchLabels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_kind(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_spec(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ManagedResourceSpec)
	fc.Result = res
	return ec.marshalNManagedResourceSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐManagedResourceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_status(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ManagedResourceStatus)
	fc.Result = res
	return ec.marshalNManagedResourceStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐManagedResourceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_raw(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResource_events(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ManagedResource_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ManagedResource().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResourceSpec_connectionSecret(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ManagedResourceSpec().ConnectionSecret(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Secret)
	fc.Result = res
	return ec.marshalOSecret2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResourceSpec_providerConfig(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ManagedResourceSpec().ProviderConfig(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderConfig)
	fc.Result = res
	return ec.marshalOProviderConfig2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResourceSpec_deletionPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResourceSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResourceSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletionPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeletionPolicy)
	fc.Result = res
	return ec.marshalODeletionPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐDeletionPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagedResourceStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ManagedResourceStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagedResourceStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_name(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_generateName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenerateName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_namespace(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_uid(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_resourceVersion(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_generation(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Generation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_creationTime(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_deletionTime(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_labels(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_annotations(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _ObjectMeta_owners(ctx context.Context, field graphql.CollectedField, obj *model.ObjectMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ObjectMeta",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ObjectMeta_owners_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ObjectMeta().Owners(rctx, obj, args["limit"].(*int), args["controller"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OwnerConnection)
	fc.Result = res
	return ec.marshalNOwnerConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwnerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Owner_resource(ctx context.Context, field graphql.CollectedField, obj *model.Owner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Owner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.KubernetesResource)
	fc.Result = res
	return ec.marshalNKubernetesResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResource(ctx, field.Selections, res)
}

func (ec *executionContext) _Owner_controller(ctx context.Context, field graphql.CollectedField, obj *model.Owner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Owner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OwnerConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.OwnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OwnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Owner)
	fc.Result = res
	return ec.marshalOOwner2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwnerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OwnerConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.OwnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OwnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyRule_verbs(ctx context.Context, field graphql.CollectedField, obj *model.PolicyRule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PolicyRule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verbs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyRule_apiGroups(ctx context.Context, field graphql.CollectedField, obj *model.PolicyRule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PolicyRule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyRule_resources(ctx context.Context, field graphql.CollectedField, obj *model.PolicyRule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PolicyRule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyRule_resourceNames(ctx context.Context, field graphql.CollectedField, obj *model.PolicyRule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PolicyRule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyRule_nonResourceURLs(ctx context.Context, field graphql.CollectedField, obj *model.PolicyRule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PolicyRule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonResourceURLs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_kind(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_spec(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProviderSpec)
	fc.Result = res
	return ec.marshalNProviderSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_status(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderStatus)
	fc.Result = res
	return ec.marshalOProviderStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_raw(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_events(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Provider_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Provider().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Provider_revisions(ctx context.Context, field graphql.CollectedField, obj *model.Provider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Provider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Provider_revisions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Provider().Revisions(rctx, obj, args["limit"].(*int), args["active"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProviderRevisionConnection)
	fc.Result = res
	return ec.marshalNProviderRevisionConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_kind(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_status(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderConfigStatus)
	fc.Result = res
	return ec.marshalOProviderConfigStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderConfigStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_events(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ProviderConfig_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProviderConfig().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfig_raw(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfigStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfigStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfigStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderConfigStatus_users(ctx context.Context, field graphql.CollectedField, obj *model.ProviderConfigStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderConfigStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderList_items(ctx context.Context, field graphql.CollectedField, obj *model.ProviderList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Provider)
	fc.Result = res
	return ec.marshalOProvider2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderList_count(ctx context.Context, field graphql.CollectedField, obj *model.ProviderList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_kind(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_spec(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProviderRevisionSpec)
	fc.Result = res
	return ec.marshalNProviderRevisionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_status(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderRevisionStatus)
	fc.Result = res
	return ec.marshalOProviderRevisionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_raw(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevision_events(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevision",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ProviderRevision_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProviderRevision().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProviderRevision)
	fc.Result = res
	return ec.marshalOProviderRevision2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_desiredState(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PackageRevisionDesiredState)
	fc.Result = res
	return ec.marshalNPackageRevisionDesiredState2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackageRevisionDesiredState(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_package(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_packagePullPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePullPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PackagePullPolicy)
	fc.Result = res
	return ec.marshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_revision(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_ignoreCrossplaneConstraints(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreCrossplaneConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionSpec_skipDependencyResolution(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipDependencyResolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_foundDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoundDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_installedDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstalledDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_invalidDependencies(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidDependencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_permissionRequests(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.PolicyRule)
	fc.Result = res
	return ec.marshalOPolicyRule2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPolicyRuleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderRevisionStatus_objects(ctx context.Context, field graphql.CollectedField, obj *model.ProviderRevisionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderRevisionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ProviderRevisionStatus_objects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProviderRevisionStatus().Objects(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KubernetesResourceConnection)
	fc.Result = res
	return ec.marshalNKubernetesResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_package(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_revisionActivationPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevisionActivationPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RevisionActivationPolicy)
	fc.Result = res
	return ec.marshalORevisionActivationPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐRevisionActivationPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_revisionHistoryLimit(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevisionHistoryLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_packagePullPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePullPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PackagePullPolicy)
	fc.Result = res
	return ec.marshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_ignoreCrossplaneConstraints(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreCrossplaneConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderSpec_skipDependencyResolution(ctx context.Context, field graphql.CollectedField, obj *model.ProviderSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipDependencyResolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *model.ProviderStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Condition)
	fc.Result = res
	return ec.marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderStatus_currentRevision(ctx context.Context, field graphql.CollectedField, obj *model.ProviderStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentRevision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderStatus_currentIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.ProviderStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_providers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_providers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Providers(rctx, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProviderList)
	fc.Result = res
	return ec.marshalNProviderList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_configurations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_configurations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Configurations(rctx, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigurationList)
	fc.Result = res
	return ec.marshalNConfigurationList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_compositeResourceDefinitions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_compositeResourceDefinitions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompositeResourceDefinitions(rctx, args["limit"].(*int), args["dangling"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositeResourceDefinitionList)
	fc.Result = res
	return ec.marshalNCompositeResourceDefinitionList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_compositions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_compositions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Compositions(rctx, args["limit"].(*int), args["dangling"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompositionList)
	fc.Result = res
	return ec.marshalNCompositionList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_kind(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectMeta)
	fc.Result = res
	return ec.marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_data(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSONObject2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_raw(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSONObject2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_events(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Secret_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Secret().Events(rctx, obj, args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _SecretConnection_items(ctx context.Context, field graphql.CollectedField, obj *model.SecretConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SecretConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Secret)
	fc.Result = res
	return ec.marshalOSecret2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecretᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SecretConnection_count(ctx context.Context, field graphql.CollectedField, obj *model.SecretConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SecretConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TypeReference_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.TypeReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TypeReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TypeReference_kind(ctx context.Context, field graphql.CollectedField, obj *model.TypeReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TypeReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ComposedResource(ctx context.Context, sel ast.SelectionSet, obj model.ComposedResource) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ManagedResource:
		return ec._ManagedResource(ctx, sel, &obj)
	case *model.ManagedResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._ManagedResource(ctx, sel, obj)
	case model.CompositeResource:
		return ec._CompositeResource(ctx, sel, &obj)
	case *model.CompositeResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResource(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ConditionedStatus(ctx context.Context, sel ast.SelectionSet, obj model.ConditionedStatus) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CompositeResourceDefinitionStatus:
		return ec._CompositeResourceDefinitionStatus(ctx, sel, &obj)
	case *model.CompositeResourceDefinitionStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResourceDefinitionStatus(ctx, sel, obj)
	case model.CompositionStatus:
		return ec._CompositionStatus(ctx, sel, &obj)
	case *model.CompositionStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositionStatus(ctx, sel, obj)
	case model.CustomResourceDefinitionStatus:
		return ec._CustomResourceDefinitionStatus(ctx, sel, &obj)
	case *model.CustomResourceDefinitionStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._CustomResourceDefinitionStatus(ctx, sel, obj)
	case model.CompositeResourceStatus:
		return ec._CompositeResourceStatus(ctx, sel, &obj)
	case *model.CompositeResourceStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResourceStatus(ctx, sel, obj)
	case model.CompositeResourceClaimStatus:
		return ec._CompositeResourceClaimStatus(ctx, sel, &obj)
	case *model.CompositeResourceClaimStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResourceClaimStatus(ctx, sel, obj)
	case model.ConfigurationStatus:
		return ec._ConfigurationStatus(ctx, sel, &obj)
	case *model.ConfigurationStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ConfigurationStatus(ctx, sel, obj)
	case model.ConfigurationRevisionStatus:
		return ec._ConfigurationRevisionStatus(ctx, sel, &obj)
	case *model.ConfigurationRevisionStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ConfigurationRevisionStatus(ctx, sel, obj)
	case model.ManagedResourceStatus:
		return ec._ManagedResourceStatus(ctx, sel, &obj)
	case *model.ManagedResourceStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ManagedResourceStatus(ctx, sel, obj)
	case model.ProviderStatus:
		return ec._ProviderStatus(ctx, sel, &obj)
	case *model.ProviderStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProviderStatus(ctx, sel, obj)
	case model.ProviderRevisionStatus:
		return ec._ProviderRevisionStatus(ctx, sel, &obj)
	case *model.ProviderRevisionStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProviderRevisionStatus(ctx, sel, obj)
	case model.ProviderConfigStatus:
		return ec._ProviderConfigStatus(ctx, sel, &obj)
	case *model.ProviderConfigStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProviderConfigStatus(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _KubernetesResource(ctx context.Context, sel ast.SelectionSet, obj model.KubernetesResource) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CompositeResourceDefinition:
		return ec._CompositeResourceDefinition(ctx, sel, &obj)
	case *model.CompositeResourceDefinition:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResourceDefinition(ctx, sel, obj)
	case model.Composition:
		return ec._Composition(ctx, sel, &obj)
	case *model.Composition:
		if obj == nil {
			return graphql.Null
		}
		return ec._Composition(ctx, sel, obj)
	case model.GenericResource:
		return ec._GenericResource(ctx, sel, &obj)
	case *model.GenericResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._GenericResource(ctx, sel, obj)
	case model.Secret:
		return ec._Secret(ctx, sel, &obj)
	case *model.Secret:
		if obj == nil {
			return graphql.Null
		}
		return ec._Secret(ctx, sel, obj)
	case model.CustomResourceDefinition:
		return ec._CustomResourceDefinition(ctx, sel, &obj)
	case *model.CustomResourceDefinition:
		if obj == nil {
			return graphql.Null
		}
		return ec._CustomResourceDefinition(ctx, sel, obj)
	case model.CompositeResource:
		return ec._CompositeResource(ctx, sel, &obj)
	case *model.CompositeResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResource(ctx, sel, obj)
	case model.CompositeResourceClaim:
		return ec._CompositeResourceClaim(ctx, sel, &obj)
	case *model.CompositeResourceClaim:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompositeResourceClaim(ctx, sel, obj)
	case model.Configuration:
		return ec._Configuration(ctx, sel, &obj)
	case *model.Configuration:
		if obj == nil {
			return graphql.Null
		}
		return ec._Configuration(ctx, sel, obj)
	case model.ConfigurationRevision:
		return ec._ConfigurationRevision(ctx, sel, &obj)
	case *model.ConfigurationRevision:
		if obj == nil {
			return graphql.Null
		}
		return ec._ConfigurationRevision(ctx, sel, obj)
	case model.ManagedResource:
		return ec._ManagedResource(ctx, sel, &obj)
	case *model.ManagedResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._ManagedResource(ctx, sel, obj)
	case model.Provider:
		return ec._Provider(ctx, sel, &obj)
	case *model.Provider:
		if obj == nil {
			return graphql.Null
		}
		return ec._Provider(ctx, sel, obj)
	case model.ProviderRevision:
		return ec._ProviderRevision(ctx, sel, &obj)
	case *model.ProviderRevision:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProviderRevision(ctx, sel, obj)
	case model.ProviderConfig:
		return ec._ProviderConfig(ctx, sel, &obj)
	case *model.ProviderConfig:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProviderConfig(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var composedResourceConnectionImplementors = []string{"ComposedResourceConnection"}

func (ec *executionContext) _ComposedResourceConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ComposedResourceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, composedResourceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComposedResourceConnection")
		case "items":
			out.Values[i] = ec._ComposedResourceConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ComposedResourceConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceImplementors = []string{"CompositeResource", "KubernetesResource", "ComposedResource"}

func (ec *executionContext) _CompositeResource(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResource")
		case "apiVersion":
			out.Values[i] = ec._CompositeResource_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._CompositeResource_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._CompositeResource_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._CompositeResource_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._CompositeResource_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "raw":
			out.Values[i] = ec._CompositeResource_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResource_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceClaimImplementors = []string{"CompositeResourceClaim", "KubernetesResource"}

func (ec *executionContext) _CompositeResourceClaim(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceClaim) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceClaimImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceClaim")
		case "apiVersion":
			out.Values[i] = ec._CompositeResourceClaim_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._CompositeResourceClaim_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._CompositeResourceClaim_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._CompositeResourceClaim_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._CompositeResourceClaim_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "raw":
			out.Values[i] = ec._CompositeResourceClaim_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceClaim_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceClaimConnectionImplementors = []string{"CompositeResourceClaimConnection"}

func (ec *executionContext) _CompositeResourceClaimConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceClaimConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceClaimConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceClaimConnection")
		case "items":
			out.Values[i] = ec._CompositeResourceClaimConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CompositeResourceClaimConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceClaimConnectionDetailsImplementors = []string{"CompositeResourceClaimConnectionDetails"}

func (ec *executionContext) _CompositeResourceClaimConnectionDetails(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceClaimConnectionDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceClaimConnectionDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceClaimConnectionDetails")
		case "lastPublishedTime":
			out.Values[i] = ec._CompositeResourceClaimConnectionDetails_lastPublishedTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceClaimSpecImplementors = []string{"CompositeResourceClaimSpec"}

func (ec *executionContext) _CompositeResourceClaimSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceClaimSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceClaimSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceClaimSpec")
		case "composition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceClaimSpec_composition(ctx, field, obj)
				return res
			})
		case "compositionSelector":
			out.Values[i] = ec._CompositeResourceClaimSpec_compositionSelector(ctx, field, obj)
		case "resource":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceClaimSpec_resource(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "writesConnectionSecretTo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceClaimSpec_writesConnectionSecretTo(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceClaimStatusImplementors = []string{"CompositeResourceClaimStatus", "ConditionedStatus"}

func (ec *executionContext) _CompositeResourceClaimStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceClaimStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceClaimStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceClaimStatus")
		case "conditions":
			out.Values[i] = ec._CompositeResourceClaimStatus_conditions(ctx, field, obj)
		case "connectionDetails":
			out.Values[i] = ec._CompositeResourceClaimStatus_connectionDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceConnectionImplementors = []string{"CompositeResourceConnection"}

func (ec *executionContext) _CompositeResourceConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceConnection")
		case "items":
			out.Values[i] = ec._CompositeResourceConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CompositeResourceConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceConnectionDetailsImplementors = []string{"CompositeResourceConnectionDetails"}

func (ec *executionContext) _CompositeResourceConnectionDetails(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceConnectionDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceConnectionDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceConnectionDetails")
		case "lastPublishedTime":
			out.Values[i] = ec._CompositeResourceConnectionDetails_lastPublishedTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionImplementors = []string{"CompositeResourceDefinition", "KubernetesResource"}

func (ec *executionContext) _CompositeResourceDefinition(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinition")
		case "apiVersion":
			out.Values[i] = ec._CompositeResourceDefinition_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._CompositeResourceDefinition_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._CompositeResourceDefinition_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._CompositeResourceDefinition_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._CompositeResourceDefinition_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._CompositeResourceDefinition_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceDefinition_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "definedCompositeResources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceDefinition_definedCompositeResources(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "definedCompositeResourceClaims":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceDefinition_definedCompositeResourceClaims(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionControllerStatusImplementors = []string{"CompositeResourceDefinitionControllerStatus"}

func (ec *executionContext) _CompositeResourceDefinitionControllerStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionControllerStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionControllerStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionControllerStatus")
		case "compositeResourceType":
			out.Values[i] = ec._CompositeResourceDefinitionControllerStatus_compositeResourceType(ctx, field, obj)
		case "compositeResourceClaimType":
			out.Values[i] = ec._CompositeResourceDefinitionControllerStatus_compositeResourceClaimType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionListImplementors = []string{"CompositeResourceDefinitionList"}

func (ec *executionContext) _CompositeResourceDefinitionList(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionList")
		case "items":
			out.Values[i] = ec._CompositeResourceDefinitionList_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CompositeResourceDefinitionList_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionNamesImplementors = []string{"CompositeResourceDefinitionNames"}

func (ec *executionContext) _CompositeResourceDefinitionNames(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionNames) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionNamesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionNames")
		case "plural":
			out.Values[i] = ec._CompositeResourceDefinitionNames_plural(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "singular":
			out.Values[i] = ec._CompositeResourceDefinitionNames_singular(ctx, field, obj)
		case "shortNames":
			out.Values[i] = ec._CompositeResourceDefinitionNames_shortNames(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._CompositeResourceDefinitionNames_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "listKind":
			out.Values[i] = ec._CompositeResourceDefinitionNames_listKind(ctx, field, obj)
		case "categories":
			out.Values[i] = ec._CompositeResourceDefinitionNames_categories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionSpecImplementors = []string{"CompositeResourceDefinitionSpec"}

func (ec *executionContext) _CompositeResourceDefinitionSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionSpec")
		case "group":
			out.Values[i] = ec._CompositeResourceDefinitionSpec_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "names":
			out.Values[i] = ec._CompositeResourceDefinitionSpec_names(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "claimNames":
			out.Values[i] = ec._CompositeResourceDefinitionSpec_claimNames(ctx, field, obj)
		case "connectionSecretKeys":
			out.Values[i] = ec._CompositeResourceDefinitionSpec_connectionSecretKeys(ctx, field, obj)
		case "defaultComposition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceDefinitionSpec_defaultComposition(ctx, field, obj)
				return res
			})
		case "enforcedComposition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceDefinitionSpec_enforcedComposition(ctx, field, obj)
				return res
			})
		case "versions":
			out.Values[i] = ec._CompositeResourceDefinitionSpec_versions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionStatusImplementors = []string{"CompositeResourceDefinitionStatus", "ConditionedStatus"}

func (ec *executionContext) _CompositeResourceDefinitionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionStatus")
		case "conditions":
			out.Values[i] = ec._CompositeResourceDefinitionStatus_conditions(ctx, field, obj)
		case "controllers":
			out.Values[i] = ec._CompositeResourceDefinitionStatus_controllers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceDefinitionVersionImplementors = []string{"CompositeResourceDefinitionVersion"}

func (ec *executionContext) _CompositeResourceDefinitionVersion(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceDefinitionVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceDefinitionVersionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceDefinitionVersion")
		case "name":
			out.Values[i] = ec._CompositeResourceDefinitionVersion_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "referenceable":
			out.Values[i] = ec._CompositeResourceDefinitionVersion_referenceable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "served":
			out.Values[i] = ec._CompositeResourceDefinitionVersion_served(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "schema":
			out.Values[i] = ec._CompositeResourceDefinitionVersion_schema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceSpecImplementors = []string{"CompositeResourceSpec"}

func (ec *executionContext) _CompositeResourceSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceSpec")
		case "composition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceSpec_composition(ctx, field, obj)
				return res
			})
		case "compositionSelector":
			out.Values[i] = ec._CompositeResourceSpec_compositionSelector(ctx, field, obj)
		case "claim":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceSpec_claim(ctx, field, obj)
				return res
			})
		case "writesConnectionSecretTo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceSpec_writesConnectionSecretTo(ctx, field, obj)
				return res
			})
		case "resources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompositeResourceSpec_resources(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceStatusImplementors = []string{"CompositeResourceStatus", "ConditionedStatus"}

func (ec *executionContext) _CompositeResourceStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceStatus")
		case "conditions":
			out.Values[i] = ec._CompositeResourceStatus_conditions(ctx, field, obj)
		case "connectionDetails":
			out.Values[i] = ec._CompositeResourceStatus_connectionDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositeResourceValidationImplementors = []string{"CompositeResourceValidation"}

func (ec *executionContext) _CompositeResourceValidation(ctx context.Context, sel ast.SelectionSet, obj *model.CompositeResourceValidation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositeResourceValidationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositeResourceValidation")
		case "openAPIV3Schema":
			out.Values[i] = ec._CompositeResourceValidation_openAPIV3Schema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositionImplementors = []string{"Composition", "KubernetesResource"}

func (ec *executionContext) _Composition(ctx context.Context, sel ast.SelectionSet, obj *model.Composition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Composition")
		case "apiVersion":
			out.Values[i] = ec._Composition_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Composition_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._Composition_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._Composition_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Composition_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._Composition_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Composition_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositionListImplementors = []string{"CompositionList"}

func (ec *executionContext) _CompositionList(ctx context.Context, sel ast.SelectionSet, obj *model.CompositionList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositionList")
		case "items":
			out.Values[i] = ec._CompositionList_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CompositionList_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositionSpecImplementors = []string{"CompositionSpec"}

func (ec *executionContext) _CompositionSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CompositionSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositionSpec")
		case "compositeTypeRef":
			out.Values[i] = ec._CompositionSpec_compositeTypeRef(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "writeConnectionSecretsToNamespace":
			out.Values[i] = ec._CompositionSpec_writeConnectionSecretsToNamespace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var compositionStatusImplementors = []string{"CompositionStatus", "ConditionedStatus"}

func (ec *executionContext) _CompositionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CompositionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositionStatus")
		case "conditions":
			out.Values[i] = ec._CompositionStatus_conditions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var conditionImplementors = []string{"Condition"}

func (ec *executionContext) _Condition(ctx context.Context, sel ast.SelectionSet, obj *model.Condition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conditionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Condition")
		case "type":
			out.Values[i] = ec._Condition_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Condition_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastTransitionTime":
			out.Values[i] = ec._Condition_lastTransitionTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":
			out.Values[i] = ec._Condition_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._Condition_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationImplementors = []string{"Configuration", "KubernetesResource"}

func (ec *executionContext) _Configuration(ctx context.Context, sel ast.SelectionSet, obj *model.Configuration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Configuration")
		case "apiVersion":
			out.Values[i] = ec._Configuration_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Configuration_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._Configuration_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._Configuration_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Configuration_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._Configuration_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Configuration_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "revisions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Configuration_revisions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationListImplementors = []string{"ConfigurationList"}

func (ec *executionContext) _ConfigurationList(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationList")
		case "items":
			out.Values[i] = ec._ConfigurationList_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ConfigurationList_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationRevisionImplementors = []string{"ConfigurationRevision", "KubernetesResource"}

func (ec *executionContext) _ConfigurationRevision(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationRevision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationRevisionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationRevision")
		case "apiVersion":
			out.Values[i] = ec._ConfigurationRevision_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._ConfigurationRevision_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._ConfigurationRevision_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._ConfigurationRevision_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ConfigurationRevision_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._ConfigurationRevision_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ConfigurationRevision_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationRevisionConnectionImplementors = []string{"ConfigurationRevisionConnection"}

func (ec *executionContext) _ConfigurationRevisionConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationRevisionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationRevisionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationRevisionConnection")
		case "items":
			out.Values[i] = ec._ConfigurationRevisionConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ConfigurationRevisionConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationRevisionSpecImplementors = []string{"ConfigurationRevisionSpec"}

func (ec *executionContext) _ConfigurationRevisionSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationRevisionSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationRevisionSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationRevisionSpec")
		case "desiredState":
			out.Values[i] = ec._ConfigurationRevisionSpec_desiredState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "package":
			out.Values[i] = ec._ConfigurationRevisionSpec_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "packagePullPolicy":
			out.Values[i] = ec._ConfigurationRevisionSpec_packagePullPolicy(ctx, field, obj)
		case "revision":
			out.Values[i] = ec._ConfigurationRevisionSpec_revision(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ignoreCrossplaneConstraints":
			out.Values[i] = ec._ConfigurationRevisionSpec_ignoreCrossplaneConstraints(ctx, field, obj)
		case "skipDependencyResolution":
			out.Values[i] = ec._ConfigurationRevisionSpec_skipDependencyResolution(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationRevisionStatusImplementors = []string{"ConfigurationRevisionStatus", "ConditionedStatus"}

func (ec *executionContext) _ConfigurationRevisionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationRevisionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationRevisionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationRevisionStatus")
		case "conditions":
			out.Values[i] = ec._ConfigurationRevisionStatus_conditions(ctx, field, obj)
		case "foundDependencies":
			out.Values[i] = ec._ConfigurationRevisionStatus_foundDependencies(ctx, field, obj)
		case "installedDependencies":
			out.Values[i] = ec._ConfigurationRevisionStatus_installedDependencies(ctx, field, obj)
		case "invalidDependencies":
			out.Values[i] = ec._ConfigurationRevisionStatus_invalidDependencies(ctx, field, obj)
		case "permissionRequests":
			out.Values[i] = ec._ConfigurationRevisionStatus_permissionRequests(ctx, field, obj)
		case "objects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ConfigurationRevisionStatus_objects(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationSpecImplementors = []string{"ConfigurationSpec"}

func (ec *executionContext) _ConfigurationSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationSpec")
		case "package":
			out.Values[i] = ec._ConfigurationSpec_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revisionActivationPolicy":
			out.Values[i] = ec._ConfigurationSpec_revisionActivationPolicy(ctx, field, obj)
		case "revisionHistoryLimit":
			out.Values[i] = ec._ConfigurationSpec_revisionHistoryLimit(ctx, field, obj)
		case "packagePullPolicy":
			out.Values[i] = ec._ConfigurationSpec_packagePullPolicy(ctx, field, obj)
		case "ignoreCrossplaneConstraints":
			out.Values[i] = ec._ConfigurationSpec_ignoreCrossplaneConstraints(ctx, field, obj)
		case "skipDependencyResolution":
			out.Values[i] = ec._ConfigurationSpec_skipDependencyResolution(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationStatusImplementors = []string{"ConfigurationStatus", "ConditionedStatus"}

func (ec *executionContext) _ConfigurationStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigurationStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationStatus")
		case "conditions":
			out.Values[i] = ec._ConfigurationStatus_conditions(ctx, field, obj)
		case "currentRevision":
			out.Values[i] = ec._ConfigurationStatus_currentRevision(ctx, field, obj)
		case "currentIdentifier":
			out.Values[i] = ec._ConfigurationStatus_currentIdentifier(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceDefinitionImplementors = []string{"CustomResourceDefinition", "KubernetesResource"}

func (ec *executionContext) _CustomResourceDefinition(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceDefinition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceDefinitionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceDefinition")
		case "apiVersion":
			out.Values[i] = ec._CustomResourceDefinition_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._CustomResourceDefinition_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._CustomResourceDefinition_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._CustomResourceDefinition_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._CustomResourceDefinition_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._CustomResourceDefinition_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			out.Values[i] = ec._CustomResourceDefinition_events(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "definedResources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CustomResourceDefinition_definedResources(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceDefinitionNamesImplementors = []string{"CustomResourceDefinitionNames"}

func (ec *executionContext) _CustomResourceDefinitionNames(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceDefinitionNames) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceDefinitionNamesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceDefinitionNames")
		case "plural":
			out.Values[i] = ec._CustomResourceDefinitionNames_plural(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "singular":
			out.Values[i] = ec._CustomResourceDefinitionNames_singular(ctx, field, obj)
		case "shortNames":
			out.Values[i] = ec._CustomResourceDefinitionNames_shortNames(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._CustomResourceDefinitionNames_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "listKind":
			out.Values[i] = ec._CustomResourceDefinitionNames_listKind(ctx, field, obj)
		case "categories":
			out.Values[i] = ec._CustomResourceDefinitionNames_categories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceDefinitionSpecImplementors = []string{"CustomResourceDefinitionSpec"}

func (ec *executionContext) _CustomResourceDefinitionSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceDefinitionSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceDefinitionSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceDefinitionSpec")
		case "group":
			out.Values[i] = ec._CustomResourceDefinitionSpec_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "names":
			out.Values[i] = ec._CustomResourceDefinitionSpec_names(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "versions":
			out.Values[i] = ec._CustomResourceDefinitionSpec_versions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceDefinitionStatusImplementors = []string{"CustomResourceDefinitionStatus", "ConditionedStatus"}

func (ec *executionContext) _CustomResourceDefinitionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceDefinitionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceDefinitionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceDefinitionStatus")
		case "conditions":
			out.Values[i] = ec._CustomResourceDefinitionStatus_conditions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceDefinitionVersionImplementors = []string{"CustomResourceDefinitionVersion"}

func (ec *executionContext) _CustomResourceDefinitionVersion(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceDefinitionVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceDefinitionVersionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceDefinitionVersion")
		case "name":
			out.Values[i] = ec._CustomResourceDefinitionVersion_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "served":
			out.Values[i] = ec._CustomResourceDefinitionVersion_served(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "schema":
			out.Values[i] = ec._CustomResourceDefinitionVersion_schema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customResourceValidationImplementors = []string{"CustomResourceValidation"}

func (ec *executionContext) _CustomResourceValidation(ctx context.Context, sel ast.SelectionSet, obj *model.CustomResourceValidation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customResourceValidationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomResourceValidation")
		case "openAPIV3Schema":
			out.Values[i] = ec._CustomResourceValidation_openAPIV3Schema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventImplementors = []string{"Event"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *model.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "apiVersion":
			out.Values[i] = ec._Event_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Event_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._Event_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "involvedObject":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Event_involvedObject(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "type":
			out.Values[i] = ec._Event_type(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._Event_reason(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Event_message(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Event_source(ctx, field, obj)
		case "count":
			out.Values[i] = ec._Event_count(ctx, field, obj)
		case "firstTime":
			out.Values[i] = ec._Event_firstTime(ctx, field, obj)
		case "lastTime":
			out.Values[i] = ec._Event_lastTime(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._Event_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventConnectionImplementors = []string{"EventConnection"}

func (ec *executionContext) _EventConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EventConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventConnection")
		case "items":
			out.Values[i] = ec._EventConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EventConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventSourceImplementors = []string{"EventSource"}

func (ec *executionContext) _EventSource(ctx context.Context, sel ast.SelectionSet, obj *model.EventSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventSourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventSource")
		case "component":
			out.Values[i] = ec._EventSource_component(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var genericResourceImplementors = []string{"GenericResource", "KubernetesResource"}

func (ec *executionContext) _GenericResource(ctx context.Context, sel ast.SelectionSet, obj *model.GenericResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, genericResourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenericResource")
		case "apiVersion":
			out.Values[i] = ec._GenericResource_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._GenericResource_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._GenericResource_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "raw":
			out.Values[i] = ec._GenericResource_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GenericResource_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kubernetesResourceConnectionImplementors = []string{"KubernetesResourceConnection"}

func (ec *executionContext) _KubernetesResourceConnection(ctx context.Context, sel ast.SelectionSet, obj *model.KubernetesResourceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kubernetesResourceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KubernetesResourceConnection")
		case "items":
			out.Values[i] = ec._KubernetesResourceConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._KubernetesResourceConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelSelectorImplementors = []string{"LabelSelector"}

func (ec *executionContext) _LabelSelector(ctx context.Context, sel ast.SelectionSet, obj *model.LabelSelector) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelSelectorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LabelSelector")
		case "matchLabels":
			out.Values[i] = ec._LabelSelector_matchLabels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managedResourceImplementors = []string{"ManagedResource", "ComposedResource", "KubernetesResource"}

func (ec *executionContext) _ManagedResource(ctx context.Context, sel ast.SelectionSet, obj *model.ManagedResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managedResourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagedResource")
		case "apiVersion":
			out.Values[i] = ec._ManagedResource_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._ManagedResource_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._ManagedResource_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._ManagedResource_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ManagedResource_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "raw":
			out.Values[i] = ec._ManagedResource_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ManagedResource_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managedResourceSpecImplementors = []string{"ManagedResourceSpec"}

func (ec *executionContext) _ManagedResourceSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ManagedResourceSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managedResourceSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagedResourceSpec")
		case "connectionSecret":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ManagedResourceSpec_connectionSecret(ctx, field, obj)
				return res
			})
		case "providerConfig":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ManagedResourceSpec_providerConfig(ctx, field, obj)
				return res
			})
		case "deletionPolicy":
			out.Values[i] = ec._ManagedResourceSpec_deletionPolicy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managedResourceStatusImplementors = []string{"ManagedResourceStatus", "ConditionedStatus"}

func (ec *executionContext) _ManagedResourceStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ManagedResourceStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managedResourceStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagedResourceStatus")
		case "conditions":
			out.Values[i] = ec._ManagedResourceStatus_conditions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var objectMetaImplementors = []string{"ObjectMeta"}

func (ec *executionContext) _ObjectMeta(ctx context.Context, sel ast.SelectionSet, obj *model.ObjectMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, objectMetaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObjectMeta")
		case "name":
			out.Values[i] = ec._ObjectMeta_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "generateName":
			out.Values[i] = ec._ObjectMeta_generateName(ctx, field, obj)
		case "namespace":
			out.Values[i] = ec._ObjectMeta_namespace(ctx, field, obj)
		case "uid":
			out.Values[i] = ec._ObjectMeta_uid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resourceVersion":
			out.Values[i] = ec._ObjectMeta_resourceVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "generation":
			out.Values[i] = ec._ObjectMeta_generation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "creationTime":
			out.Values[i] = ec._ObjectMeta_creationTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletionTime":
			out.Values[i] = ec._ObjectMeta_deletionTime(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._ObjectMeta_labels(ctx, field, obj)
		case "annotations":
			out.Values[i] = ec._ObjectMeta_annotations(ctx, field, obj)
		case "owners":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ObjectMeta_owners(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ownerImplementors = []string{"Owner"}

func (ec *executionContext) _Owner(ctx context.Context, sel ast.SelectionSet, obj *model.Owner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ownerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Owner")
		case "resource":
			out.Values[i] = ec._Owner_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "controller":
			out.Values[i] = ec._Owner_controller(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ownerConnectionImplementors = []string{"OwnerConnection"}

func (ec *executionContext) _OwnerConnection(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ownerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OwnerConnection")
		case "items":
			out.Values[i] = ec._OwnerConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._OwnerConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policyRuleImplementors = []string{"PolicyRule"}

func (ec *executionContext) _PolicyRule(ctx context.Context, sel ast.SelectionSet, obj *model.PolicyRule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policyRuleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PolicyRule")
		case "verbs":
			out.Values[i] = ec._PolicyRule_verbs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apiGroups":
			out.Values[i] = ec._PolicyRule_apiGroups(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._PolicyRule_resources(ctx, field, obj)
		case "resourceNames":
			out.Values[i] = ec._PolicyRule_resourceNames(ctx, field, obj)
		case "nonResourceURLs":
			out.Values[i] = ec._PolicyRule_nonResourceURLs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerImplementors = []string{"Provider", "KubernetesResource"}

func (ec *executionContext) _Provider(ctx context.Context, sel ast.SelectionSet, obj *model.Provider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Provider")
		case "apiVersion":
			out.Values[i] = ec._Provider_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Provider_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._Provider_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._Provider_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Provider_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._Provider_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Provider_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "revisions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Provider_revisions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerConfigImplementors = []string{"ProviderConfig", "KubernetesResource"}

func (ec *executionContext) _ProviderConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderConfig")
		case "apiVersion":
			out.Values[i] = ec._ProviderConfig_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._ProviderConfig_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._ProviderConfig_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ProviderConfig_status(ctx, field, obj)
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProviderConfig_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "raw":
			out.Values[i] = ec._ProviderConfig_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerConfigStatusImplementors = []string{"ProviderConfigStatus", "ConditionedStatus"}

func (ec *executionContext) _ProviderConfigStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderConfigStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerConfigStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderConfigStatus")
		case "conditions":
			out.Values[i] = ec._ProviderConfigStatus_conditions(ctx, field, obj)
		case "users":
			out.Values[i] = ec._ProviderConfigStatus_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerListImplementors = []string{"ProviderList"}

func (ec *executionContext) _ProviderList(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderList")
		case "items":
			out.Values[i] = ec._ProviderList_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ProviderList_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerRevisionImplementors = []string{"ProviderRevision", "KubernetesResource"}

func (ec *executionContext) _ProviderRevision(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderRevision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerRevisionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderRevision")
		case "apiVersion":
			out.Values[i] = ec._ProviderRevision_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._ProviderRevision_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._ProviderRevision_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spec":
			out.Values[i] = ec._ProviderRevision_spec(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ProviderRevision_status(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._ProviderRevision_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProviderRevision_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerRevisionConnectionImplementors = []string{"ProviderRevisionConnection"}

func (ec *executionContext) _ProviderRevisionConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderRevisionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerRevisionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderRevisionConnection")
		case "items":
			out.Values[i] = ec._ProviderRevisionConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ProviderRevisionConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerRevisionSpecImplementors = []string{"ProviderRevisionSpec"}

func (ec *executionContext) _ProviderRevisionSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderRevisionSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerRevisionSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderRevisionSpec")
		case "desiredState":
			out.Values[i] = ec._ProviderRevisionSpec_desiredState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "package":
			out.Values[i] = ec._ProviderRevisionSpec_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "packagePullPolicy":
			out.Values[i] = ec._ProviderRevisionSpec_packagePullPolicy(ctx, field, obj)
		case "revision":
			out.Values[i] = ec._ProviderRevisionSpec_revision(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ignoreCrossplaneConstraints":
			out.Values[i] = ec._ProviderRevisionSpec_ignoreCrossplaneConstraints(ctx, field, obj)
		case "skipDependencyResolution":
			out.Values[i] = ec._ProviderRevisionSpec_skipDependencyResolution(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerRevisionStatusImplementors = []string{"ProviderRevisionStatus", "ConditionedStatus"}

func (ec *executionContext) _ProviderRevisionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderRevisionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerRevisionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderRevisionStatus")
		case "conditions":
			out.Values[i] = ec._ProviderRevisionStatus_conditions(ctx, field, obj)
		case "foundDependencies":
			out.Values[i] = ec._ProviderRevisionStatus_foundDependencies(ctx, field, obj)
		case "installedDependencies":
			out.Values[i] = ec._ProviderRevisionStatus_installedDependencies(ctx, field, obj)
		case "invalidDependencies":
			out.Values[i] = ec._ProviderRevisionStatus_invalidDependencies(ctx, field, obj)
		case "permissionRequests":
			out.Values[i] = ec._ProviderRevisionStatus_permissionRequests(ctx, field, obj)
		case "objects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProviderRevisionStatus_objects(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerSpecImplementors = []string{"ProviderSpec"}

func (ec *executionContext) _ProviderSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerSpecImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderSpec")
		case "package":
			out.Values[i] = ec._ProviderSpec_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revisionActivationPolicy":
			out.Values[i] = ec._ProviderSpec_revisionActivationPolicy(ctx, field, obj)
		case "revisionHistoryLimit":
			out.Values[i] = ec._ProviderSpec_revisionHistoryLimit(ctx, field, obj)
		case "packagePullPolicy":
			out.Values[i] = ec._ProviderSpec_packagePullPolicy(ctx, field, obj)
		case "ignoreCrossplaneConstraints":
			out.Values[i] = ec._ProviderSpec_ignoreCrossplaneConstraints(ctx, field, obj)
		case "skipDependencyResolution":
			out.Values[i] = ec._ProviderSpec_skipDependencyResolution(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerStatusImplementors = []string{"ProviderStatus", "ConditionedStatus"}

func (ec *executionContext) _ProviderStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderStatus")
		case "conditions":
			out.Values[i] = ec._ProviderStatus_conditions(ctx, field, obj)
		case "currentRevision":
			out.Values[i] = ec._ProviderStatus_currentRevision(ctx, field, obj)
		case "currentIdentifier":
			out.Values[i] = ec._ProviderStatus_currentIdentifier(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "providers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_providers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "configurations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_configurations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "compositeResourceDefinitions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_compositeResourceDefinitions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "compositions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_compositions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var secretImplementors = []string{"Secret", "KubernetesResource"}

func (ec *executionContext) _Secret(ctx context.Context, sel ast.SelectionSet, obj *model.Secret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, secretImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Secret")
		case "apiVersion":
			out.Values[i] = ec._Secret_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Secret_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._Secret_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "data":
			out.Values[i] = ec._Secret_data(ctx, field, obj)
		case "raw":
			out.Values[i] = ec._Secret_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Secret_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var secretConnectionImplementors = []string{"SecretConnection"}

func (ec *executionContext) _SecretConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SecretConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, secretConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SecretConnection")
		case "items":
			out.Values[i] = ec._SecretConnection_items(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SecretConnection_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var typeReferenceImplementors = []string{"TypeReference"}

func (ec *executionContext) _TypeReference(ctx context.Context, sel ast.SelectionSet, obj *model.TypeReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typeReferenceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypeReference")
		case "apiVersion":
			out.Values[i] = ec._TypeReference_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kind":
			out.Values[i] = ec._TypeReference_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNComposedResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResource(ctx context.Context, sel ast.SelectionSet, v model.ComposedResource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ComposedResource(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResource(ctx context.Context, sel ast.SelectionSet, v model.CompositeResource) graphql.Marshaler {
	return ec._CompositeResource(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResource2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResource(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResource(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceClaim2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaim(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceClaim) graphql.Marshaler {
	return ec._CompositeResourceClaim(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceClaimConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimConnection(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceClaimConnection) graphql.Marshaler {
	return ec._CompositeResourceClaimConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceClaimConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimConnection(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceClaimConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceClaimConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceClaimSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimSpec(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceClaimSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceClaimSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceClaimStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimStatus(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceClaimStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceClaimStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceConnection(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceConnection) graphql.Marshaler {
	return ec._CompositeResourceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceConnection(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceDefinition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinition(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceDefinition) graphql.Marshaler {
	return ec._CompositeResourceDefinition(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceDefinitionList2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionList(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceDefinitionList) graphql.Marshaler {
	return ec._CompositeResourceDefinitionList(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceDefinitionList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionList(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionList(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionNames(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionNames) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionNames(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceDefinitionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionSpec(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceDefinitionVersion2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionVersion(ctx context.Context, sel ast.SelectionSet, v model.CompositeResourceDefinitionVersion) graphql.Marshaler {
	return ec._CompositeResourceDefinitionVersion(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositeResourceSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceSpec(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositeResourceStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceStatus(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositeResourceStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNComposition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx context.Context, sel ast.SelectionSet, v model.Composition) graphql.Marshaler {
	return ec._Composition(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositionList2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionList(ctx context.Context, sel ast.SelectionSet, v model.CompositionList) graphql.Marshaler {
	return ec._CompositionList(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompositionList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionList(ctx context.Context, sel ast.SelectionSet, v *model.CompositionList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositionList(ctx, sel, v)
}

func (ec *executionContext) marshalNCompositionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionSpec(ctx context.Context, sel ast.SelectionSet, v *model.CompositionSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompositionSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCondition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCondition(ctx context.Context, sel ast.SelectionSet, v model.Condition) graphql.Marshaler {
	return ec._Condition(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNConditionStatus2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionStatus(ctx context.Context, v interface{}) (model.ConditionStatus, error) {
	var res model.ConditionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConditionStatus2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionStatus(ctx context.Context, sel ast.SelectionSet, v model.ConditionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNConfiguration2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfiguration(ctx context.Context, sel ast.SelectionSet, v model.Configuration) graphql.Marshaler {
	return ec._Configuration(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigurationList2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationList(ctx context.Context, sel ast.SelectionSet, v model.ConfigurationList) graphql.Marshaler {
	return ec._ConfigurationList(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigurationList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationList(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigurationList(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigurationRevision2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevision(ctx context.Context, sel ast.SelectionSet, v model.ConfigurationRevision) graphql.Marshaler {
	return ec._ConfigurationRevision(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigurationRevisionConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionConnection(ctx context.Context, sel ast.SelectionSet, v model.ConfigurationRevisionConnection) graphql.Marshaler {
	return ec._ConfigurationRevisionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigurationRevisionConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionConnection(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationRevisionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigurationRevisionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigurationRevisionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionSpec(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationRevisionSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigurationRevisionSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigurationSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationSpec(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigurationSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionNames(ctx context.Context, sel ast.SelectionSet, v *model.CustomResourceDefinitionNames) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomResourceDefinitionNames(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomResourceDefinitionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionSpec(ctx context.Context, sel ast.SelectionSet, v *model.CustomResourceDefinitionSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomResourceDefinitionSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomResourceDefinitionVersion2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionVersion(ctx context.Context, sel ast.SelectionSet, v model.CustomResourceDefinitionVersion) graphql.Marshaler {
	return ec._CustomResourceDefinitionVersion(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvent2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v model.Event) graphql.Marshaler {
	return ec._Event(ctx, sel, &v)
}

func (ec *executionContext) marshalNEventConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx context.Context, sel ast.SelectionSet, v model.EventConnection) graphql.Marshaler {
	return ec._EventConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNEventConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventConnection(ctx context.Context, sel ast.SelectionSet, v *model.EventConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EventConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSONObject2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSONObject2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNKubernetesResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResource(ctx context.Context, sel ast.SelectionSet, v model.KubernetesResource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KubernetesResource(ctx, sel, v)
}

func (ec *executionContext) marshalNKubernetesResourceConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceConnection(ctx context.Context, sel ast.SelectionSet, v model.KubernetesResourceConnection) graphql.Marshaler {
	return ec._KubernetesResourceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNKubernetesResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceConnection(ctx context.Context, sel ast.SelectionSet, v *model.KubernetesResourceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KubernetesResourceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNManagedResourceSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐManagedResourceSpec(ctx context.Context, sel ast.SelectionSet, v *model.ManagedResourceSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManagedResourceSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNManagedResourceStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐManagedResourceStatus(ctx context.Context, sel ast.SelectionSet, v *model.ManagedResourceStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManagedResourceStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNObjectMeta2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐObjectMeta(ctx context.Context, sel ast.SelectionSet, v *model.ObjectMeta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ObjectMeta(ctx, sel, v)
}

func (ec *executionContext) marshalNOwner2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwner(ctx context.Context, sel ast.SelectionSet, v model.Owner) graphql.Marshaler {
	return ec._Owner(ctx, sel, &v)
}

func (ec *executionContext) marshalNOwnerConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwnerConnection(ctx context.Context, sel ast.SelectionSet, v model.OwnerConnection) graphql.Marshaler {
	return ec._OwnerConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNOwnerConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwnerConnection(ctx context.Context, sel ast.SelectionSet, v *model.OwnerConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OwnerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPackageRevisionDesiredState2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackageRevisionDesiredState(ctx context.Context, v interface{}) (model.PackageRevisionDesiredState, error) {
	var res model.PackageRevisionDesiredState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPackageRevisionDesiredState2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackageRevisionDesiredState(ctx context.Context, sel ast.SelectionSet, v model.PackageRevisionDesiredState) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPolicyRule2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPolicyRule(ctx context.Context, sel ast.SelectionSet, v model.PolicyRule) graphql.Marshaler {
	return ec._PolicyRule(ctx, sel, &v)
}

func (ec *executionContext) marshalNProvider2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProvider(ctx context.Context, sel ast.SelectionSet, v model.Provider) graphql.Marshaler {
	return ec._Provider(ctx, sel, &v)
}

func (ec *executionContext) marshalNProviderList2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderList(ctx context.Context, sel ast.SelectionSet, v model.ProviderList) graphql.Marshaler {
	return ec._ProviderList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProviderList2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderList(ctx context.Context, sel ast.SelectionSet, v *model.ProviderList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProviderList(ctx, sel, v)
}

func (ec *executionContext) marshalNProviderRevision2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevision(ctx context.Context, sel ast.SelectionSet, v model.ProviderRevision) graphql.Marshaler {
	return ec._ProviderRevision(ctx, sel, &v)
}

func (ec *executionContext) marshalNProviderRevisionConnection2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionConnection(ctx context.Context, sel ast.SelectionSet, v model.ProviderRevisionConnection) graphql.Marshaler {
	return ec._ProviderRevisionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProviderRevisionConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProviderRevisionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProviderRevisionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProviderRevisionSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionSpec(ctx context.Context, sel ast.SelectionSet, v *model.ProviderRevisionSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProviderRevisionSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNProviderSpec2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderSpec(ctx context.Context, sel ast.SelectionSet, v *model.ProviderSpec) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProviderSpec(ctx, sel, v)
}

func (ec *executionContext) marshalNSecret2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx context.Context, sel ast.SelectionSet, v model.Secret) graphql.Marshaler {
	return ec._Secret(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTypeReference2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐTypeReference(ctx context.Context, sel ast.SelectionSet, v *model.TypeReference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TypeReference(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOComposedResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ComposedResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComposedResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComposedResourceConnection2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposedResourceConnection(ctx context.Context, sel ast.SelectionSet, v *model.ComposedResourceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComposedResourceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompositeResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompositeResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompositeResourceClaim2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompositeResourceClaim) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompositeResourceClaim2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaim(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompositeResourceClaim2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaim(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceClaim) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceClaim(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceClaimConnectionDetails2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceClaimConnectionDetails(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceClaimConnectionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceClaimConnectionDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceConnectionDetails2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceConnectionDetails(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceConnectionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceConnectionDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceDefinition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompositeResourceDefinition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompositeResourceDefinition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompositeResourceDefinitionControllerStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionControllerStatus(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionControllerStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionControllerStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceDefinitionNames2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionNames(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionNames) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionNames(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceDefinitionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionStatus(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceDefinitionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceDefinitionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositeResourceDefinitionVersion2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompositeResourceDefinitionVersion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompositeResourceDefinitionVersion2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceDefinitionVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompositeResourceValidation2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositeResourceValidation(ctx context.Context, sel ast.SelectionSet, v *model.CompositeResourceValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositeResourceValidation(ctx, sel, v)
}

func (ec *executionContext) marshalOComposition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Composition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComposition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComposition2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐComposition(ctx context.Context, sel ast.SelectionSet, v *model.Composition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Composition(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCompositionStatus(ctx context.Context, sel ast.SelectionSet, v *model.CompositionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCondition2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConditionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Condition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCondition2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCondition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOConfiguration2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Configuration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfiguration2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfiguration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOConfigurationRevision2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ConfigurationRevision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigurationRevision2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOConfigurationRevisionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationRevisionStatus(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationRevisionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigurationRevisionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigurationStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐConfigurationStatus(ctx context.Context, sel ast.SelectionSet, v *model.ConfigurationStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigurationStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomResourceDefinitionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionStatus(ctx context.Context, sel ast.SelectionSet, v *model.CustomResourceDefinitionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomResourceDefinitionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomResourceDefinitionVersion2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CustomResourceDefinitionVersion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomResourceDefinitionVersion2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceDefinitionVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCustomResourceValidation2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐCustomResourceValidation(ctx context.Context, sel ast.SelectionSet, v *model.CustomResourceValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomResourceValidation(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeletionPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐDeletionPolicy(ctx context.Context, v interface{}) (*model.DeletionPolicy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DeletionPolicy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeletionPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐDeletionPolicy(ctx context.Context, sel ast.SelectionSet, v *model.DeletionPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEvent2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvent2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEventSource2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventSource(ctx context.Context, sel ast.SelectionSet, v *model.EventSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventSource(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventType2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventType(ctx context.Context, v interface{}) (*model.EventType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventType2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐEventType(ctx context.Context, sel ast.SelectionSet, v *model.EventType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOJSONObject2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSONObject2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOKubernetesResource2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KubernetesResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKubernetesResource2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐKubernetesResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLabelSelector2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐLabelSelector(ctx context.Context, sel ast.SelectionSet, v *model.LabelSelector) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LabelSelector(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalMap(v)
}

func (ec *executionContext) marshalOOwner2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwnerᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Owner) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOwner2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐOwner(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx context.Context, v interface{}) (*model.PackagePullPolicy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PackagePullPolicy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPackagePullPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPackagePullPolicy(ctx context.Context, sel ast.SelectionSet, v *model.PackagePullPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPolicyRule2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPolicyRuleᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PolicyRule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPolicyRule2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐPolicyRule(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProvider2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Provider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProvider2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProviderConfig2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderConfig(ctx context.Context, sel ast.SelectionSet, v *model.ProviderConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProviderConfig(ctx, sel, v)
}

func (ec *executionContext) marshalOProviderConfigStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderConfigStatus(ctx context.Context, sel ast.SelectionSet, v *model.ProviderConfigStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProviderConfigStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOProviderRevision2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderRevision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderRevision2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProviderRevisionStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderRevisionStatus(ctx context.Context, sel ast.SelectionSet, v *model.ProviderRevisionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProviderRevisionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOProviderStatus2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐProviderStatus(ctx context.Context, sel ast.SelectionSet, v *model.ProviderStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProviderStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalORevisionActivationPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐRevisionActivationPolicy(ctx context.Context, v interface{}) (*model.RevisionActivationPolicy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RevisionActivationPolicy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORevisionActivationPolicy2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐRevisionActivationPolicy(ctx context.Context, sel ast.SelectionSet, v *model.RevisionActivationPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSecret2ᚕgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecretᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Secret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSecret2githubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSecret2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐSecret(ctx context.Context, sel ast.SelectionSet, v *model.Secret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Secret(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOTypeReference2ᚖgithubᚗcomᚋnegzᚋxgqlᚋinternalᚋgraphᚋmodelᚐTypeReference(ctx context.Context, sel ast.SelectionSet, v *model.TypeReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TypeReference(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
