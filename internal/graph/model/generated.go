// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ComposedResource interface {
	IsComposedResource()
}

type ConditionedStatus interface {
	IsConditionedStatus()
}

type KubernetesResource interface {
	IsKubernetesResource()
}

type ComposedResourceList struct {
	Items []ComposedResource `json:"items"`
	Count int                `json:"count"`
}

type CompositeResource struct {
	APIVersion string                   `json:"apiVersion"`
	Kind       string                   `json:"kind"`
	Metadata   *ObjectMeta              `json:"metadata"`
	Spec       *CompositeResourceSpec   `json:"spec"`
	Status     *CompositeResourceStatus `json:"status"`
	Raw        string                   `json:"raw"`
	Events     *EventConnection         `json:"events"`
}

func (CompositeResource) IsKubernetesResource() {}
func (CompositeResource) IsComposedResource()   {}

type CompositeResourceClaim struct {
	APIVersion string                        `json:"apiVersion"`
	Kind       string                        `json:"kind"`
	Metadata   *ObjectMeta                   `json:"metadata"`
	Spec       *CompositeResourceClaimSpec   `json:"spec"`
	Status     *CompositeResourceClaimStatus `json:"status"`
	Raw        string                        `json:"raw"`
	Events     *EventConnection              `json:"events"`
}

func (CompositeResourceClaim) IsKubernetesResource() {}

type CompositeResourceClaimConnection struct {
	Items []CompositeResourceClaim `json:"items"`
	Count int                      `json:"count"`
}

type CompositeResourceClaimConnectionDetails struct {
	LastPublishedTime *time.Time `json:"lastPublishedTime"`
}

type CompositeResourceClaimSpec struct {
	Composition              *Composition       `json:"composition"`
	CompositionSelector      *LabelSelector     `json:"compositionSelector"`
	Resource                 *CompositeResource `json:"resource"`
	WritesConnectionSecretTo *Secret            `json:"writesConnectionSecretTo"`
}

type CompositeResourceClaimStatus struct {
	Conditions        []Condition                              `json:"conditions"`
	ConnectionDetails *CompositeResourceClaimConnectionDetails `json:"connectionDetails"`
}

func (CompositeResourceClaimStatus) IsConditionedStatus() {}

type CompositeResourceConnection struct {
	Items []CompositeResource `json:"items"`
	Count int                 `json:"count"`
}

type CompositeResourceConnectionDetails struct {
	LastPublishedTime *time.Time `json:"lastPublishedTime"`
}

type CompositeResourceDefinition struct {
	APIVersion                     string                             `json:"apiVersion"`
	Kind                           string                             `json:"kind"`
	Metadata                       *ObjectMeta                        `json:"metadata"`
	Spec                           *CompositeResourceDefinitionSpec   `json:"spec"`
	Status                         *CompositeResourceDefinitionStatus `json:"status"`
	Raw                            string                             `json:"raw"`
	Events                         *EventConnection                   `json:"events"`
	DefinedCompositeResources      *CompositeResourceConnection       `json:"definedCompositeResources"`
	DefinedCompositeResourceClaims *CompositeResourceClaimConnection  `json:"definedCompositeResourceClaims"`
}

func (CompositeResourceDefinition) IsKubernetesResource() {}

type CompositeResourceDefinitionControllerStatus struct {
	CompositeResourceType      *TypeReference `json:"compositeResourceType"`
	CompositeResourceClaimType *TypeReference `json:"compositeResourceClaimType"`
}

type CompositeResourceDefinitionList struct {
	Items []CompositeResourceDefinition `json:"items"`
	Count int                           `json:"count"`
}

type CompositeResourceDefinitionNames struct {
	Plural     string   `json:"plural"`
	Singular   *string  `json:"singular"`
	ShortNames []string `json:"shortNames"`
	Kind       string   `json:"kind"`
	ListKind   *string  `json:"listKind"`
	Categories []string `json:"categories"`
}

type CompositeResourceDefinitionSpec struct {
	Group                string                               `json:"group"`
	Names                *CompositeResourceDefinitionNames    `json:"names"`
	ClaimNames           *CompositeResourceDefinitionNames    `json:"claimNames"`
	ConnectionSecretKeys []string                             `json:"connectionSecretKeys"`
	DefaultComposition   *Composition                         `json:"defaultComposition"`
	EnforcedComposition  *Composition                         `json:"enforcedComposition"`
	Versions             []CompositeResourceDefinitionVersion `json:"versions"`
}

type CompositeResourceDefinitionStatus struct {
	Conditions  []Condition                                  `json:"conditions"`
	Controllers *CompositeResourceDefinitionControllerStatus `json:"controllers"`
}

func (CompositeResourceDefinitionStatus) IsConditionedStatus() {}

type CompositeResourceDefinitionVersion struct {
	Name          *string                      `json:"name"`
	Referenceable *bool                        `json:"referenceable"`
	Served        *bool                        `json:"served"`
	Schema        *CompositeResourceValidation `json:"schema"`
}

type CompositeResourceSpec struct {
	Composition              *Composition            `json:"composition"`
	CompositionSelector      *LabelSelector          `json:"compositionSelector"`
	Claim                    *CompositeResourceClaim `json:"claim"`
	WritesConnectionSecretTo *Secret                 `json:"writesConnectionSecretTo"`
	Resources                *ComposedResourceList   `json:"resources"`
}

type CompositeResourceStatus struct {
	Conditions        []Condition                         `json:"conditions"`
	ConnectionDetails *CompositeResourceConnectionDetails `json:"connectionDetails"`
}

func (CompositeResourceStatus) IsConditionedStatus() {}

type CompositeResourceValidation struct {
	OpenAPIV3Schema *string `json:"openAPIV3Schema"`
}

type Composition struct {
	APIVersion string             `json:"apiVersion"`
	Kind       string             `json:"kind"`
	Metadata   *ObjectMeta        `json:"metadata"`
	Spec       *CompositionSpec   `json:"spec"`
	Status     *CompositionStatus `json:"status"`
	Raw        string             `json:"raw"`
	Events     *EventConnection   `json:"events"`
}

func (Composition) IsKubernetesResource() {}

type CompositionList struct {
	Items []Composition `json:"items"`
	Count int           `json:"count"`
}

type CompositionSpec struct {
	CompositeTypeRef                  *TypeReference `json:"compositeTypeRef"`
	WriteConnectionSecretsToNamespace *string        `json:"writeConnectionSecretsToNamespace"`
}

type CompositionStatus struct {
	Conditions []Condition `json:"conditions"`
}

func (CompositionStatus) IsConditionedStatus() {}

type Condition struct {
	Type               string          `json:"type"`
	Status             ConditionStatus `json:"status"`
	LastTransitionTime time.Time       `json:"lastTransitionTime"`
	Reason             string          `json:"reason"`
	Message            *string         `json:"message"`
}

type Configuration struct {
	APIVersion string                           `json:"apiVersion"`
	Kind       string                           `json:"kind"`
	Metadata   *ObjectMeta                      `json:"metadata"`
	Spec       *ConfigurationSpec               `json:"spec"`
	Status     *ConfigurationStatus             `json:"status"`
	Raw        string                           `json:"raw"`
	Events     *EventConnection                 `json:"events"`
	Revisions  *ConfigurationRevisionConnection `json:"revisions"`
}

func (Configuration) IsKubernetesResource() {}

type ConfigurationList struct {
	Items []Configuration `json:"items"`
	Count int             `json:"count"`
}

type ConfigurationRevision struct {
	APIVersion string                       `json:"apiVersion"`
	Kind       string                       `json:"kind"`
	Metadata   *ObjectMeta                  `json:"metadata"`
	Spec       *ConfigurationRevisionSpec   `json:"spec"`
	Status     *ConfigurationRevisionStatus `json:"status"`
	Raw        string                       `json:"raw"`
	Events     *EventConnection             `json:"events"`
}

func (ConfigurationRevision) IsKubernetesResource() {}

type ConfigurationRevisionConnection struct {
	Items []ConfigurationRevision `json:"items"`
	Count int                     `json:"count"`
}

type ConfigurationRevisionSpec struct {
	DesiredState                PackageRevisionDesiredState `json:"desiredState"`
	Package                     string                      `json:"package"`
	PackagePullPolicy           *PackagePullPolicy          `json:"packagePullPolicy"`
	Revision                    int                         `json:"revision"`
	IgnoreCrossplaneConstraints *bool                       `json:"ignoreCrossplaneConstraints"`
	SkipDependencyResolution    *bool                       `json:"skipDependencyResolution"`
}

type ConfigurationRevisionStatus struct {
	Conditions            []Condition                   `json:"conditions"`
	FoundDependencies     *int                          `json:"foundDependencies"`
	InstalledDependencies *int                          `json:"installedDependencies"`
	InvalidDependencies   *int                          `json:"invalidDependencies"`
	PermissionRequests    []PolicyRule                  `json:"permissionRequests"`
	Objects               *KubernetesResourceConnection `json:"objects"`
}

func (ConfigurationRevisionStatus) IsConditionedStatus() {}

type ConfigurationSpec struct {
	Package                     string                    `json:"package"`
	RevisionActivationPolicy    *RevisionActivationPolicy `json:"revisionActivationPolicy"`
	RevisionHistoryLimit        *int                      `json:"revisionHistoryLimit"`
	PackagePullPolicy           *PackagePullPolicy        `json:"packagePullPolicy"`
	IgnoreCrossplaneConstraints *bool                     `json:"ignoreCrossplaneConstraints"`
	SkipDependencyResolution    *bool                     `json:"skipDependencyResolution"`
}

type ConfigurationStatus struct {
	Conditions        []Condition `json:"conditions"`
	CurrentRevision   *string     `json:"currentRevision"`
	CurrentIdentifier *string     `json:"currentIdentifier"`
}

func (ConfigurationStatus) IsConditionedStatus() {}

type CustomResourceDefinition struct {
	APIVersion       string                          `json:"apiVersion"`
	Kind             string                          `json:"kind"`
	Metadata         *ObjectMeta                     `json:"metadata"`
	Spec             *CustomResourceDefinitionSpec   `json:"spec"`
	Status           *CustomResourceDefinitionStatus `json:"status"`
	Raw              string                          `json:"raw"`
	Events           *EventConnection                `json:"events"`
	DefinedResources *KubernetesResourceConnection   `json:"definedResources"`
}

func (CustomResourceDefinition) IsKubernetesResource() {}

type CustomResourceDefinitionNames struct {
	Plural     string   `json:"plural"`
	Singular   *string  `json:"singular"`
	ShortNames []string `json:"shortNames"`
	Kind       string   `json:"kind"`
	ListKind   *string  `json:"listKind"`
	Categories []string `json:"categories"`
}

type CustomResourceDefinitionSpec struct {
	Group    string                            `json:"group"`
	Names    *CustomResourceDefinitionNames    `json:"names"`
	Versions []CustomResourceDefinitionVersion `json:"versions"`
}

type CustomResourceDefinitionStatus struct {
	Conditions []Condition `json:"conditions"`
}

func (CustomResourceDefinitionStatus) IsConditionedStatus() {}

type CustomResourceDefinitionVersion struct {
	Name   string                    `json:"name"`
	Served bool                      `json:"served"`
	Schema *CustomResourceValidation `json:"schema"`
}

type CustomResourceValidation struct {
	OpenAPIV3Schema *string `json:"openAPIV3Schema"`
}

type Event struct {
	APIVersion     string             `json:"apiVersion"`
	Kind           string             `json:"kind"`
	Metadata       *ObjectMeta        `json:"metadata"`
	InvolvedObject KubernetesResource `json:"involvedObject"`
	Type           *EventType         `json:"type"`
	Reason         *string            `json:"reason"`
	Message        *string            `json:"message"`
	Source         *EventSource       `json:"source"`
	Count          *int               `json:"count"`
	FirstTime      *time.Time         `json:"firstTime"`
	LastTime       *time.Time         `json:"lastTime"`
	Raw            string             `json:"raw"`
}

type EventConnection struct {
	Items []Event `json:"items"`
	Count int     `json:"count"`
}

type EventSource struct {
	Component *string `json:"component"`
}

type GenericResource struct {
	APIVersion string           `json:"apiVersion"`
	Kind       string           `json:"kind"`
	Metadata   *ObjectMeta      `json:"metadata"`
	Raw        string           `json:"raw"`
	Events     *EventConnection `json:"events"`
}

func (GenericResource) IsKubernetesResource() {}

type KubernetesResourceConnection struct {
	Items []KubernetesResource `json:"items"`
	Count int                  `json:"count"`
}

type LabelSelector struct {
	MatchLabels map[string]interface{} `json:"matchLabels"`
}

type ManagedResource struct {
	APIVersion string                 `json:"apiVersion"`
	Kind       string                 `json:"kind"`
	Metadata   *ObjectMeta            `json:"metadata"`
	Spec       *ManagedResourceSpec   `json:"spec"`
	Status     *ManagedResourceStatus `json:"status"`
	Raw        string                 `json:"raw"`
	Events     *EventConnection       `json:"events"`
}

func (ManagedResource) IsComposedResource()   {}
func (ManagedResource) IsKubernetesResource() {}

type ManagedResourceStatus struct {
	Conditions []Condition `json:"conditions"`
}

func (ManagedResourceStatus) IsConditionedStatus() {}

type Owner struct {
	Resource   KubernetesResource `json:"resource"`
	Controller *bool              `json:"controller"`
}

type OwnerConnection struct {
	Items []Owner `json:"items"`
	Count int     `json:"count"`
}

type PolicyRule struct {
	Verbs           []string `json:"verbs"`
	APIGroups       []string `json:"apiGroups"`
	Resources       []string `json:"resources"`
	ResourceNames   []string `json:"resourceNames"`
	NonResourceURLs []string `json:"nonResourceURLs"`
}

type ProviderConfig struct {
	APIVersion string                `json:"apiVersion"`
	Kind       string                `json:"kind"`
	Metadata   *ObjectMeta           `json:"metadata"`
	Status     *ProviderConfigStatus `json:"status"`
	Events     *EventConnection      `json:"events"`
	Raw        string                `json:"raw"`
}

func (ProviderConfig) IsKubernetesResource() {}

type ProviderConfigStatus struct {
	Conditions []Condition `json:"conditions"`
	Users      *int        `json:"users"`
}

func (ProviderConfigStatus) IsConditionedStatus() {}

type ProviderList struct {
	Items []Provider `json:"items"`
	Count int        `json:"count"`
}

type ProviderRevisionConnection struct {
	Items []ProviderRevision `json:"items"`
	Count int                `json:"count"`
}

type Secret struct {
	APIVersion string           `json:"apiVersion"`
	Kind       string           `json:"kind"`
	Metadata   *ObjectMeta      `json:"metadata"`
	Data       *string          `json:"data"`
	Raw        string           `json:"raw"`
	Events     *EventConnection `json:"events"`
}

func (Secret) IsKubernetesResource() {}

type SecretConnection struct {
	Items []Secret `json:"items"`
	Count int      `json:"count"`
}

type TypeReference struct {
	APIVersion string `json:"apiVersion"`
	Kind       string `json:"kind"`
}

type ConditionStatus string

const (
	ConditionStatusUnknown ConditionStatus = "Unknown"
	ConditionStatusFalse   ConditionStatus = "False"
	ConditionStatusTrue    ConditionStatus = "True"
)

var AllConditionStatus = []ConditionStatus{
	ConditionStatusUnknown,
	ConditionStatusFalse,
	ConditionStatusTrue,
}

func (e ConditionStatus) IsValid() bool {
	switch e {
	case ConditionStatusUnknown, ConditionStatusFalse, ConditionStatusTrue:
		return true
	}
	return false
}

func (e ConditionStatus) String() string {
	return string(e)
}

func (e *ConditionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConditionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConditionStatus", str)
	}
	return nil
}

func (e ConditionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeletionPolicy string

const (
	DeletionPolicyDelete DeletionPolicy = "Delete"
	DeletionPolicyOrphan DeletionPolicy = "Orphan"
)

var AllDeletionPolicy = []DeletionPolicy{
	DeletionPolicyDelete,
	DeletionPolicyOrphan,
}

func (e DeletionPolicy) IsValid() bool {
	switch e {
	case DeletionPolicyDelete, DeletionPolicyOrphan:
		return true
	}
	return false
}

func (e DeletionPolicy) String() string {
	return string(e)
}

func (e *DeletionPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionPolicy", str)
	}
	return nil
}

func (e DeletionPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeNormal  EventType = "Normal"
	EventTypeWarning EventType = "Warning"
)

var AllEventType = []EventType{
	EventTypeNormal,
	EventTypeWarning,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeNormal, EventTypeWarning:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PackagePullPolicy string

const (
	PackagePullPolicyAlways       PackagePullPolicy = "Always"
	PackagePullPolicyNever        PackagePullPolicy = "Never"
	PackagePullPolicyIfNotPresent PackagePullPolicy = "IfNotPresent"
)

var AllPackagePullPolicy = []PackagePullPolicy{
	PackagePullPolicyAlways,
	PackagePullPolicyNever,
	PackagePullPolicyIfNotPresent,
}

func (e PackagePullPolicy) IsValid() bool {
	switch e {
	case PackagePullPolicyAlways, PackagePullPolicyNever, PackagePullPolicyIfNotPresent:
		return true
	}
	return false
}

func (e PackagePullPolicy) String() string {
	return string(e)
}

func (e *PackagePullPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackagePullPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackagePullPolicy", str)
	}
	return nil
}

func (e PackagePullPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PackageRevisionDesiredState string

const (
	PackageRevisionDesiredStateInactive PackageRevisionDesiredState = "Inactive"
	PackageRevisionDesiredStateActive   PackageRevisionDesiredState = "Active"
)

var AllPackageRevisionDesiredState = []PackageRevisionDesiredState{
	PackageRevisionDesiredStateInactive,
	PackageRevisionDesiredStateActive,
}

func (e PackageRevisionDesiredState) IsValid() bool {
	switch e {
	case PackageRevisionDesiredStateInactive, PackageRevisionDesiredStateActive:
		return true
	}
	return false
}

func (e PackageRevisionDesiredState) String() string {
	return string(e)
}

func (e *PackageRevisionDesiredState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageRevisionDesiredState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageRevisionDesiredState", str)
	}
	return nil
}

func (e PackageRevisionDesiredState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RevisionActivationPolicy string

const (
	RevisionActivationPolicyAutomatic RevisionActivationPolicy = "Automatic"
	RevisionActivationPolicyManual    RevisionActivationPolicy = "Manual"
)

var AllRevisionActivationPolicy = []RevisionActivationPolicy{
	RevisionActivationPolicyAutomatic,
	RevisionActivationPolicyManual,
}

func (e RevisionActivationPolicy) IsValid() bool {
	switch e {
	case RevisionActivationPolicyAutomatic, RevisionActivationPolicyManual:
		return true
	}
	return false
}

func (e RevisionActivationPolicy) String() string {
	return string(e)
}

func (e *RevisionActivationPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RevisionActivationPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RevisionActivationPolicy", str)
	}
	return nil
}

func (e RevisionActivationPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
