# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema/*.gql

# Where should the generated server code go?
exec:
  filename: internal/graph/generated/generated.go
  package: generated

# Where should any generated models go?
model:
  filename: internal/graph/model/generated.go
  package: model

# gqlgen by defaut generates getter methods for interfaces and types that
# implement it.
omit_getters: true

# Use []Thing instead of []*Thing
omit_slice_element_pointers: true
struct_fields_always_pointers: false
resolvers_always_return_pointers: false

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/upbound/xgql/internal/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/upbound/xgql/internal/graph/model.ReferenceID
  StringMap:
    model:
      - github.com/upbound/xgql/internal/graph/model.StringMap
  JSON:
    model:
      - github.com/upbound/xgql/internal/graph/model.JSON
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  ProviderRevisionStatus:
    extraFields:
      ObjectRefs:
        type: "[]github.com/crossplane/crossplane-runtime/apis/common/v1.TypedReference"
  ConfigurationRevisionStatus:
    extraFields:
      ObjectRefs:
        type: "[]github.com/crossplane/crossplane-runtime/apis/common/v1.TypedReference"
  Event:
    extraFields:
      InvolvedObjectRef:
        type: "k8s.io/api/core/v1.ObjectReference"
